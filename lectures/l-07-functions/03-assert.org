#+STARTUP: showall
#+STARTUP: lognotestate
#+TAGS:
#+SEQ_TODO: TODO STARTED DONE DEFERRED CANCELLED | WAITING DELEGATED APPT
#+DRAWERS: HIDDEN STATE
#+TITLE: programming by assertions
#+CATEGORY: 
#+PROPERTY: header-args:sql             :engine postgresql  :exports both :cmdline csc370
#+PROPERTY: header-args:sqlite          :db /path/to/db  :colnames yes
#+PROPERTY: header-args:C++             :results output :flags -std=c++17 -Wall --pedantic -Werror
#+PROPERTY: header-args:R               :results output  :colnames yes



* Assertions

- An assertion is a condition that must be true at the point of execution:
- An assertion should be true if there are no mistakes in the program

** Preconditions

Specify conditions at the start of a function.

** Postconditions

Specify conditions at the end of a function.

** Invariants

Specify conditions over a defined region of a program.

* Assertions in C++

assert evaluates an expression. If the expression fails, the program outputs the location of the failed assertion.

Assertion failed: expression, file filename, line line number

- source file of the failure
- line number of the failure
- name of the function of the failure

It can be used to stop execution of a program

#+BEGIN_SRC C++ :main no :flags -std=c++17 -Wall --pedantic -Werror :results output :exports both
#include <iostream>
#include <cassert> 

void f()
{
   assert(10 < 1);
}

int main()
{
   assert(true);
   f();
   return 0;
}
#+END_SRC

#+BEGIN_EXAMPLE
C-bin-16339uyS: /tmp/babel-16339dvC/C-src-16339hoM.cpp:13: void f(): Assertion `10 < 1' failed.
#+END_EXAMPLE



#+BEGIN_SRC C++ :main no :flags -std=c++17 -Wall --pedantic -Werror :results output :exports both
#include <iostream>
#include <cassert> 
#include <vector> 

int divide(int n, int d)
{
    assert(d != 0);
    return n / d;
}

int main()
{
   divide(3,2);
   divide(3,0);
   return 0;
}
#+END_SRC

#+RESULTS:
/tmp/test.cpp:10: int divide(int, int): Assertion `d != 0' 
failed.

* Preconditions

- Predicates that are true before the function executes

** Example avoiding division by zero

#+BEGIN_SRC C++ :main no :flags -std=c++17 -Wall --pedantic -Werror :results output :exports both
int divide(int n, int d)
{
    assert(d != 0);
    return n / d;
}
#+END_SRC

* Post-conditions

- Predicates that are true after the function executes

** Example: square of an int is always positive


#+BEGIN_SRC C++ :main no :flags -std=c++17 -Wall --pedantic -Werror :results output :exports both
int square(int i)
{
    int result;
    /// code of function
    assert(result >= 0);
}
#+END_SRC

* Invariants

Combined with the loop condition, the loop
invariant allows us to reason about the behavior
of the loop:

#+BEGIN_SRC C++
while(test) {
   //both test loop invariant must be true
   <body of the function
   // loop invariant must be true
 }
// test is false
// loop invariant is true
#+END_SRC

Example:

#+BEGIN_SRC C++
int i = 0;
while(i < n) {
   i++;
}
#+END_SRC

#+BEGIN_SRC C++
int i = 0;
assert(i <= n);
assert(n >= 0);
while(i < n) {
   assert(i < n);
   assert(i>=0 && i<=n);
   i++;
   assert(i>=0 && i<=n);
}
assert(!(i < n) && i>=0 && i<=n);
#+END_SRC

Example:

#+BEGIN_SRC C++
int sum (std::vector<int> elements)
{
   int sum {};
   int i {};
   int n {elements.size};
   // sum has sum of elements from 0 to i-1 the empty set
   while (i < n) {
   // sum == sum of elements 0..i-1
       sum += elements [i];
       i++;
    // sum == sum of elements 0..i-1
    }
    // i==n  AND
    // sum has sum elements 0..i-1 Ã  sum == sum of elements 0..n-1
    //  sum == sum of int[] elements
    return sum;
}
#+END_SRC

* Stack

Functions:

- Push
- Pop
- Top

** Push

Preconditions: size >= 0
Postcondition: final size == (original size + 1)

** Pop

Preconditions: size > 1
Postcondition: final size == (original size - 1)

** Top

Preconditions: size > 1
Postcondition: final size == original size


* Assertions are not error handling

- A program error is a bug, and should never occur.
  - Assertions can help detect program errors
- A run-time error can be a valid event
  - Exceptions help dealing with run-time errors


