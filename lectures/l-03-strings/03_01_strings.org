#+STARTUP: showall
#+STARTUP: lognotestate
#+TAGS:
#+SEQ_TODO: TODO STARTED DONE DEFERRED CANCELLED | WAITING DELEGATED APPT
#+DRAWERS: HIDDEN STATE
#+TITLE: Strings
#+CATEGORY: 
#+PROPERTY: header-args: lang           :varname value
#+PROPERTY: header-args:sqlite          :db /path/to/db  :colnames yes
#+PROPERTY: header-args:C++             :results output :flags -std=c++17 -Wall --pedantic -Werror
#+PROPERTY: header-args:R               :results output  :colnames yes

* Prelude: chars

- chars are like ints
- guaranted to be of size 1
  - a char can be used an a signed int of size 1 byte
- but they have a special interpretation

#+BEGIN_SRC C++ :main no :flags -std=c++17 -Wall --pedantic -Werror :results output :exports both
#include <iostream>

int main()
{
   char c { 'd'};
   char d { 109 };
   std::cout << c << std::endl 
             << d << std::endl
             << int(c) << std::endl;
   c = d - 6;
   std::cout << "[" << c << "]" << std::endl;

   return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
d
m
100
[g]
#+end_example

- Note that a '1' is not the same as numeric 1

#+BEGIN_SRC C++ :main no :flags -std=c++17 -Wall --pedantic -Werror :results output :exports both
#include <iostream>

int main()
{
   char e { '1' };
   std::cout << e << std::endl 
             << int(e) << std::endl;
   return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
1
49
#+end_example

- We can use characters in numeric operations
- it uses the "ASCII" value of the character

#+BEGIN_SRC C++ :main no :flags -std=c++17 -Wall --pedantic -Werror :results output :exports both
#include <iostream>

int main()
{
   char c { 'A'};
   std::cout << c << " " 
             << int(c) << std::endl;
   c = c+5;
   std::cout << c << std::endl;
   c = '1' * 2;
   std::cout << c << " " << int(' ') << " " 
             << int(c) << std::endl;
   return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
A 65
F
b 32 98
#+end_example

* Strings

In C++ we have two types of strings:

- C type: char[] and char*


#+BEGIN_SRC C++
char filename[] = "myFile.txt";
char *filename = "myFile.txt";
#+END_SRC


- std::string

#+BEGIN_SRC C++
#include <string>

std::string filename {"myFile.txt"};
std::string emptyString {""};
std::string emptyString2 {};

#+END_SRC

- For this course, *never, ever*, declare a char[] or char*
- Always use std::string


* References

** Reference
 http://www.cplusplus.com/reference/string/string/

** Tutorial
 https://www.tutorialspoint.com/cplusplus/cpp_strings.htm

- some functions
- .size() returns the length of the string
- .empty() returns true is if the string is ""

#+BEGIN_SRC C++ :main no :results output :flags -std=c++17 -Wall --pedantic -Werror :exports both
#include <iostream>
#include <string>

int main()
{
    std::string filename {"filename.txt"};
    std::string emptyString {""};
    std::string another {}; // initializes to empty string
    another = filename;
    std::cout << "Content: " << filename << std::endl;
    std::cout << "Empty: " << emptyString.size() << std::endl;
    if (emptyString.empty()) {
      std::cout << "It is really Empty " << std::endl;
    }
    return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
Content: filename.txt
Empty: 0
It is really Empty
#+end_example


* We can traverse an array as a sequence of characters:

- ~.at(i)~ to access element at position i

#+BEGIN_SRC C++ :main no :results output :flags -std=c++17 -Wall --pedantic :exports both
#include <iostream>
#include <string>

int main()
{
    std::string filename {"vic"};
    // note the type size_t
    /// it is an unsigned int
    for(size_t i=0;i<filename.size();i++) {
        std::cout << "position " << i << " value " 
                  << filename.at(i) << std::endl;
    }
    std::cout << "a. " << filename << std::endl;

    for(char c : filename) {
        std::cout << "b. Char " << c << std::endl;   
        c++;
    }
    std::cout << "c. " << filename << std::endl;

    return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
position 0 value v
position 1 value i
position 2 value c
a. vic
b. Char v
b. Char i
b. Char c
c. vic
#+end_example


* We can modify the characters in the string

- using a reference in a for-loop
  - note that the proper type for the index is size_t, not int
- use .at()

#+BEGIN_SRC C++ :main no :results output :flags -std=c++17 -Wall --pedantic :exports both
#include <iostream>
#include <string>

int main()
{
    std::string filename {"abc"};
    for(size_t i=0;i<filename.size();i++) {
       filename.at(i) = 'X'; // notice single quote for characters
    }
    std::cout << "1: " << filename << std::endl;
    for(char &c:filename) {
       c = 'Z'; 
    }
    std::cout << "2: " << filename << std::endl;
    filename.at(0) = 'a';
    filename.at(1) = 'b';
    std::cout << "3: " << filename << std::endl;

    return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
1: XXX
2: ZZZ
3: abZ
#+end_example

* We can add characters to a string

- += to append to a string
- + to concatenate two strings

#+BEGIN_SRC C++ :main no :results output :flags -std=c++17 -Wall --pedantic :exports both
#include <iostream>
#include <string>

int main()
{
    std::string filename {"abc-"};
    // append a string to the end
    filename += "ijk.";  // concatenate array of char to a string

     std::string test = filename + 'a'; // concatenate a char to a string
    std::cout << "1. " << filename << std::endl;
    // we can also append characters!
    filename += 'z';
    std::cout << "2. " << filename << std::endl;
    return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
1. abc-ijk.
2. abc-ijk.z
#+end_example

* Be careful:

A bare sequence between quotes ~"as in this"~ is a char array. *Not a std::string!!*

- The compiler, most of the time, will convert it to std::string as needed
- But sometimes it does cannot: this program will fail

#+BEGIN_SRC C++ :main no :results output :flags -std=c++17 -Wall --pedantic :exports both
#include <iostream>
#include <string>

int main()
{
    std::string greeting {};

    greeting = "Your name is " + "bob"; // we cannot add one char array to another
                                        // at least one must be a std::string
    std::cout << greeting << std::endl;
    return 0;
}

#+END_SRC

#+RESULTS:

#+BEGIN_EXAMPLE
/tmp/babel-2558967A/C-src-25589UJI.cpp: In function ‘int main()’:
/tmp/babel-2558967A/C-src-25589UJI.cpp:15:32: error: invalid operands of types ‘const char [14]’ and ‘const char [4]’ to binary ‘operator+’
     greeting = "Your name is " + "bob";
#+END_EXAMPLE

We need first to convert the char array to a std::string then we can add the other

#+BEGIN_SRC C++ :main no :results output :flags -std=c++17 -Wall --pedantic :exports both
#include <iostream>
#include <string>

int main()
{
    std::string greeting {};
    // typecase the char array to a std::string
    //greeting = std::string("Your name is ") + "bob"; 
    greeting = "bob" + std::string("Your name is ") ;
    // int(c) => integer          (int)c
    // std::string(something) => std::string  (std::string)"abc" (error)
    std::cout << greeting << std::endl;
    return 0;
}

#+END_SRC

#+RESULTS:

* Other string operations

Lots of new operations

http://www.cplusplus.com/reference/string/string/

Examples:


| Query  | size()             | return length of the string                      |
|        | empty()            | is the string empty?                             |
|        | back()             | returns last character                           |
|        | front()            | returns first character                          |
|        | substr(pos, len)   | return a substring                               |
|        | find               | find a character or a substring in a string      |
|--------+--------------------+--------------------------------------------------|
| Modify | clear()            | reset the string to "" (empty string)            |
|        | push_back(c)       | add  character c to the end of a string          |
|        | pop_back()         | remove last character (if it exists)             |
|        | +=                 | append another string or a character to a string |
|        | erase(pos, len)    | remove some characters from the string           |
|        | insert(pos, subst) | insert subst in a given location                 |

* Convert a string to numbers

- we need to use special functions to convert a string to an number

| stoi | string to int    |
| stod | string to double |

#+BEGIN_SRC C++ :main no :results output :flags -std=c++17 -Wall --pedantic :exports both
#include <iostream>
#include <string>

int main()
{
    std::string str1 {"45"};
    std::string str2 {"3.14159"};
    std::string str3 {"31337 with words"};
    std::string str4 {"words and 2"};

    int myint1 { std::stoi(str1) };
    int myint2 { std::stoi(str2) };
    int myint3 { std::stoi(str3) };
   // int myint4 = std::stoi(str4); // this one is invalid, will create an exception
    double myd { std::stod(str2) };
    std::cout << "std::stoi(\"" << str1 << "\") is " << myint1 << '\n';
    std::cout << "std::stoi(\"" << str2 << "\") is " << myint2 << '\n';
    std::cout << "std::stoi(\"" << str3 << "\") is " << myint3 << '\n';
    std::cout << "std::stod(\"" << str2 << "\") is " << myd << '\n';
    
    return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
std::stoi("45") is 45
std::stoi("3.14159") is 3
std::stoi("31337 with words") is 31337
std::stod("3.14159") is 3.14159
#+end_example

* Compare strings

- Very easy: just use == like any basic type
- We can use any typical comparison operation: >, <, >=, <=, ==, != 

#+BEGIN_SRC C++ :main no :results output :flags -std=c++17 -Wall --pedantic :exports both
#include <iostream>
#include <string>

int main()
{
    std::string you = "Bob";
    std::string me = "Daniel";    
    std::string he = "Daniel";
    std::string she = "Daniela";

    std::cout << (he == you) << std::endl;
    std::cout << (he == me) << std::endl;

    std::cout << std::boolalpha; // to print booleans nicely
    std::cout << (he == me) << std::endl;
    std::cout << (he > she) << std::endl;
    std::cout << (he >= she) << std::endl;
    std::cout << (he < she) << std::endl;
    std::cout << (he <= she) << std::endl;
    std::cout << (he != she) << std::endl;
    std::cout << (he == she) << std::endl;
    return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
0
1
true
false
false
true
true
true
false
#+end_example

* Reading strings

Note: This is the input read in the following examples.

#+BEGIN_EXAMPLE
SpongeBob Square-Pants

Daffy Duck!
#+END_EXAMPLE

** read one line at a time

Note how the empty line is read

#+BEGIN_SRC C++ :main no :results output :flags -std=c++17 -Wall --pedantic :exports both :cmdline < dmg.txt
#include <iostream>
#include <string>

int main()
{
    std::string name {};
    while (std::getline(std::cin, name)) {
       std::cout << "Line: " << name << std::endl;
    }
    
    return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
Line: SpongeBob Square-Pants
Line: 
Line: Daffy Duck!
#+end_example

*** Or you can read one "token" at a time

- this reads a "token" (word separated by "whitespace")
- note how it skips whitespace before reading the token
  - we don't read the empty line

#+BEGIN_SRC C++ :main no :results output :flags -std=c++17 -Wall --pedantic :exports both :cmdline < dmg.txt
#include <iostream>
#include <string>

int main()
{
    std::string word {};
    while (std::cin >> word) {
       std::cout << "Token: " << word << std::endl;
    }
    return 0;
}
#+END_SRC

#+RESULTS:
#+begin_example
Token: SpongeBob
Token: Square-Pants
Token: Daffy
Token: Duck!
#+end_example

* summary
* extra: string comparison

to understand how strings are compared, 
let us implement a function that compares two strings,
to determine if one is "<=" than the other

#+BEGIN_SRC C++ :results verbatim :output both
#include <iostream>

bool string_less_or_equal(const std::string st1,
                      const std::string st2) {
    if (st1.size() ==0)
        return true; // both empty => same
    if (st2.size() ==0)
        return false; // one empty => different
    // compare the first char
    if (st1.front() == st2.front()) {
        // same first char: compare the remaining strings
        return string_less_or_equal(st1.substr(1), st2.substr(1));
    } else {
        // different first char: compare them
        return st1.front() < st2.front();
    }
}


int main()
{
    std::cout << string_less_or_equal("daniel", "daniela") << std::endl;
    std::cout << string_less_or_equal("daniel", "daniel") << std::endl;
    std::cout << string_less_or_equal("daniela", "daniel") << std::endl;
    return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
1
1
0
#+end_example

Once we have <=, we can implement any other operation in terms of it

#+BEGIN_SRC C++ :results verbatim :output both
#include <iostream>

bool string_less_or_equal(const std::string &st1,
                      const std::string &st2) {
    if (st1.size() ==0)
        return true;
    if (st2.size() ==0)
        return false;
    if (st1.front() == st2.front()) {
        // compare the remaining strings
        return string_less_or_equal(st1.substr(1), st2.substr(1));
    } else {
        // compare the front string
        return st1.front() < st2.front();
    }
}

bool string_equal(const std::string &st1, const std::string &st2) {
    return string_less_or_equal(st1, st2) && string_less_or_equal(st2, st1);
}

bool string_not_equal(const std::string &st1, const std::string &st2) {
    return ! string_equal(st1,st2);
}

bool string_less_than(const std::string &st1, const std::string &st2) {
    return string_less_or_equal(st1, st2) && ! string_equal(st1,st2);
}

bool string_bigger_than(const std::string &st1, const std::string &st2) {
    return string_less_or_equal(st2, st1) && ! string_equal(st1, st2);
}

bool string_bigger_or_equal(const std::string &st1, const std::string &st2) {
    return string_less_or_equal(st2, st1);
}


int main()
{
    std::cout << string_less_or_equal("daniel", "daniela") << std::endl;
    std::cout << string_less_than("daniel", "daniela") << std::endl;
    std::cout << string_equal("daniel", "daniela") << std::endl;
    std::cout << string_not_equal("daniel", "daniela") << std::endl;
    std::cout << string_bigger_or_equal("daniel", "daniela") << std::endl;
    std::cout << string_bigger_than("daniel", "daniela") << std::endl;
    return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
1
1
0
1
0
0
#+end_example

Here is a more efficient way to do it.  Mmm, it looks even more readable.

- So we compare strings up to the point they have the same number of characters
  - the moment one of these characters is different, we return with the result

- if we consume all common characters, the less_or_equal depends on which has less characters

#+BEGIN_SRC C++ :results verbatim :output both
#include <iostream>

bool string_less_or_equal(const std::string &st1,
                          const std::string &st2) 
{

    for(size_t i= 0; i< st1.size() && i < st2.size(); i++) {
        if (st1.at(i) != st2.at(i)) {
            return st1.at(i) < st2.at(i);
        }
    }
    return (st1.size() <= st2.size() );
}


int main()
{
    std::cout << string_less_or_equal("", "daniela") << std::endl;
    std::cout << string_less_or_equal("daniel", "") << std::endl;
    std::cout << string_less_or_equal("", "") << std::endl;
    
    std::cout << string_less_or_equal("aba", "aca") << std::endl;
    std::cout << string_less_or_equal("aca", "aba") << std::endl;

    std::cout << string_less_or_equal("daniel", "daniela") << std::endl;
    std::cout << string_less_or_equal("daniel", "daniel") << std::endl;
    std::cout << string_less_or_equal("daniela", "daniel") << std::endl;
    return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
1
0
1
1
0
1
1
0
#+end_example
