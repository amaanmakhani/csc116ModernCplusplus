#+STARTUP: showall
#+STARTUP: lognotestate
#+TAGS:
#+SEQ_TODO: TODO STARTED DONE DEFERRED CANCELLED | WAITING DELEGATED APPT
#+DRAWERS: HIDDEN STATE
#+TITLE: Lecture 2 CSC116
#+CATEGORY:
#+PROPERTY: header-args: lang           :varname value
#+PROPERTY: header-args:sqlite          :db /path/to/db  :colnames yes
#+PROPERTY: header-args:C++             :results output :exports both :flags -std=c++17 -Wall --pedantic -Werror
#+PROPERTY: header-args:R               :results output :exports both  :colnames yes

** Table of Contents                                                    :TOC:
- [[#data-types][Data types]]
- [[#for-more-information][For more information]]
- [[#fundamental-types-same-as-in-c][Fundamental types: same as in C]]
     - [[#but-i-am-too-lazy][But I am too lazy...]]
     - [[#but-i-am-really-really-lazy][But I am really, really lazy]]
     - [[#unsigned-modifier][Unsigned modifier]]
     - [[#size-modifier][size modifier]]
     - [[#and-you-can-apply-them-both-size-and-sign-modifiers][and you can apply them both: size and sign modifiers:]]
-  [[#compilerarchitecture-dependencies][Compiler/architecture dependencies]]
- [[#wide-chars][Wide chars]]
- [[#16-bits][16 bits]]
- [[#narrowing-conversions][Narrowing conversions]]
- [[#do-i-care-about-all-of-this-for-the-examquizzes][Do I care about all of this for the exam/quizzes?]]
- [[#type-conversions][Type conversions]]
     - [[#forcing-the-type-of-a-constant][Forcing the type of a constant]]
     - [[#corollary][Corollary:]]

* Data types

- Fundamental
- Compound
- Standard library (objects)

* For more information

https://en.cppreference.com/w/cpp/language/types

* Fundamental types: same as in C

- char
- int
- double
- float
- bool

#+BEGIN_SRC C++ :main no :flags -std=c++17 :results output :exports both :exports both
#include <iostream>
int main()
{
   char aChar {101};
   short aShort {200};
   int anInt {5};
   float aFloat {1000.3};
   double aDouble {124.3};
   bool   aBool {false};

   std::cout << aChar << std::endl;
   std::cout << aShort << std::endl;

   std::cout << anInt << std::endl;
   std::cout << aFloat << std::endl;
   std::cout << aDouble << std::endl;

   std::cout << aBool <<  std::endl;
   // print boolean nicely
   std::cout << std::boolalpha;
   std::cout << aBool <<  std::endl;
}
#+END_SRC

#+RESULTS:
#+begin_example
A
200
5
1000.3
124.3
0
false
#+end_example

#+BEGIN_SRC C++ :main no :flags -std=c++17 :results output :exports both :exports both
#include <iostream>
int main()
{
   char aChar {'a'};
   char aChar2 {97};

   std::cout << aChar <<  std::endl;
   std::cout << aChar2 <<  std::endl;

}
#+END_SRC

#+RESULTS:
#+begin_example
a
a
#+end_example

This is a very simple way to find out the specifics of a given data type:

- max()
- min()
- is_signed
- digits
- has infinity

Note that the type is between *<>* (e.g. <int>)


#+BEGIN_SRC C++ :main no :flags -std=c++17 :results output :exports both
#include <iostream>     // std::cout
#include <limits>       // std::numeric_limits

int main () 
{
  std::cout << std::boolalpha;
  std::cout << "Minimum value for type: " << std::numeric_limits<double>::min() << '\n';
  std::cout << "Maximum value for type: " << std::numeric_limits<double>::max() << '\n';
  std::cout << "int is signed: " << std::numeric_limits<double>::is_signed << '\n';
  std::cout << "Non-sign bits in int: " << std::numeric_limits<double>::digits << '\n';
  std::cout << "Type has infinity: " << std::numeric_limits<double>::has_infinity << '\n';
  return 0;
}
#+END_SRC

#+RESULTS:
#+begin_example
Minimum value for type: 2.22507e-308
Maximum value for type: 1.79769e+308
int is signed: true
Non-sign bits in int: 53
Type has infinity: true
#+end_example

** But I am too lazy...

I don't want to have to type the name of the type, over and over again.
Let us make the code a bit more generic:

- instead of the data type, we will use the /type of the variable/.
  
#+begin_src C++
decltype(myVar) /// retrives the type of a given variable
#+end_src


#+BEGIN_SRC C++ :main no :flags -std=c++17 :results output :exports both
#include <iostream>     // std::cout
#include <limits>       // std::numeric_limits

int main () 
{
  int myVar {};

  std::cout << std::boolalpha;
  std::cout << "Minimum value for type: " << std::numeric_limits<decltype(myVar)>::min() << '\n';
  std::cout << "Maximum value for type: " << std::numeric_limits<decltype(myVar)>::max() << '\n';
  std::cout << "int is signed: " << std::numeric_limits<decltype(myVar)>::is_signed << '\n';
  std::cout << "Non-sign bits in int: " << std::numeric_limits<decltype(myVar)>::digits << '\n';
  std::cout << "Type has infinity: " << std::numeric_limits<decltype(myVar)>::has_infinity << '\n';
  return 0;
}
#+END_SRC

#+RESULTS:
#+begin_example
Minimum value for type: -2147483648
Maximum value for type: 2147483647
int is signed: true
Non-sign bits in int: 31
Type has infinity: false
#+end_example

** But I am really, really lazy

So let us do it with a function and some preprocessor magic, which you can ignore for now

#+BEGIN_SRC C++ :main no :flags -std=c++17 :results output :exports both
#include <iostream>     // std::cout
#include <limits>       // std::numeric_limits

//this is some C++ black magic
template <typename T>
void print_type_info_and_name(T myVar, std::string name) 
{
  // first parameter is the type, and the second a string to print
  std::cout << std::boolalpha;

  std::cout << "Details for variable " << name << std::endl;
  std::cout << "   Min and max value for type: " << std::numeric_limits<decltype(myVar)>::min() << ','
            << std::numeric_limits<decltype(myVar)>::max() << std::endl;
  std::cout << "   Type is signed: " << std::numeric_limits<decltype(myVar)>::is_signed << ". ";
  std::cout << "Non-sign bits for type: " << std::numeric_limits<decltype(myVar)>::digits << std::endl;
  std::cout << "   Type has infinity: " << std::numeric_limits<decltype(myVar)>::has_infinity << '\n';
}
// and this is some preprocessor black magic
#define print_type_info(x) (print_type_info_and_name(x, #x))


int main () 
{
  bool myBoolean {0};
  char myChar {0};
  int myInt {0};
  float myFloat {0};
  double myDouble {0};

  print_type_info(myBoolean);
  print_type_info(myChar);
  print_type_info(myInt);
  print_type_info(myFloat);
  print_type_info(myDouble);

  return 0;
}
#+END_SRC

#+RESULTS:
#+begin_example
Details for variable myBoolean
   Min and max value for type: false,true
   Type is signed: false. Non-sign bits for type: 1
   Type has infinity: false
Details for variable myChar
   Min and max value for type: 
   Type is signed: true. Non-sign bits for type: 7
   Type has infinity: false
Details for variable myInt
   Min and max value for type: -2147483648,2147483647
   Type is signed: true. Non-sign bits for type: 31
   Type has infinity: false
Details for variable myFloat
   Min and max value for type: 1.17549e-38,3.40282e+38
   Type is signed: true. Non-sign bits for type: 24
   Type has infinity: true
Details for variable myDouble
   Min and max value for type: 2.22507e-308,1.79769e+308
   Type is signed: true. Non-sign bits for type: 53
   Type has infinity: true
#+end_example

** Unsigned modifier

the integral types (int and char) can be unsigned


#+BEGIN_SRC C++ :main no :flags -std=c++17 :results output :exports both
#include <iostream>     // std::cout
#include <limits>       // std::numeric_limits

//this is some C++ black magic
template <typename T>
void print_type_info_and_name(T myVar, std::string name) 
{
  std::cout << std::boolalpha;

  std::cout << "Details for variable " << name << std::endl;
  std::cout << "   Min and max value for type: " << std::numeric_limits<decltype(myVar)>::min() << ','
            << std::numeric_limits<decltype(myVar)>::max() << std::endl;
  std::cout << "   Type is signed: " << std::numeric_limits<decltype(myVar)>::is_signed << ". ";
  std::cout << "Non-sign bits for type: " << std::numeric_limits<decltype(myVar)>::digits << std::endl;
  std::cout << "   Type has infinity: " << std::numeric_limits<decltype(myVar)>::has_infinity << '\n';
}
// and this is some preprocessor black magic
#define print_type_info(x) (print_type_info_and_name(x, #x))


int main () 
{
  char          myChar {0};
  signed char   mySignedChar {0};
  unsigned char myUnsignedChar {0};

  int        myInt {0};
  signed int mySignedInt {0};
  unsigned   myUnsignedInt {0};

  print_type_info(myChar);
  print_type_info(mySignedChar);
  print_type_info(myUnsignedChar);
  print_type_info(myInt);
  print_type_info(mySignedInt);
  print_type_info(myUnsignedInt);

  return 0;
}
#+END_SRC

#+RESULTS:
#+begin_example
Details for variable myInt
   Min and max value for type: -2147483648,2147483647
   Type is signed: true. Non-sign bits for type: 31
   Type has infinity: false
Details for variable mySignedInt
   Min and max value for type: -2147483648,2147483647
   Type is signed: true. Non-sign bits for type: 31
   Type has infinity: false
Details for variable myUnsignedInt
   Min and max value for type: 0,4294967295
   Type is signed: false. Non-sign bits for type: 32
   Type has infinity: false
#+end_example

But signed is not valid for real numbers: float, double, nor boolean

#+BEGIN_SRC C++ :main no :flags -std=c++17 :results output :exports both
#include <iostream>     // std::cout
#include <limits>       // std::numeric_limits

//this is some C++ black magic
template <typename T>
void print_type_info_and_name(T myVar, std::string name) 
{
  std::cout << std::boolalpha;

  std::cout << "Details for variable " << name << std::endl;
  std::cout << "   Min and max value for type: " << std::numeric_limits<decltype(myVar)>::min() << ','
            << std::numeric_limits<decltype(myVar)>::max() << std::endl;
  std::cout << "   Type is signed: " << std::numeric_limits<decltype(myVar)>::is_signed << ". ";
  std::cout << "Non-sign bits in type: " << std::numeric_limits<decltype(myVar)>::digits << std::endl;
  std::cout << "   Type has infinity: " << std::numeric_limits<decltype(myVar)>::has_infinity << '\n';
}
// and this is some preprocessor black magic
#define print_type_info(x) (print_type_info_and_name(x, #x))

int main () 
{
  float myFloat {0};
  signed float mySignedFloat {0};
  unsigned float myUnsignedFloat {0}; // does not work


  print_type_info(myFloat);
  print_type_info(mySignedFloat);
  print_type_info(myUnsignedFloat);


  return 0;
}
#+END_SRC

#+RESULTS:

** size modifier

The int and double type has several variants:

- short int
- long int, long double
- long long int, long long double


#+BEGIN_SRC C++ :main no :flags -std=c++17 :results output :exports both
#include <iostream>     // std::cout
#include <limits>       // std::numeric_limits

//this is some C++ black magic
template <typename T>
void print_type_info_and_name(T myVar, std::string name) 
{
  std::cout << std::boolalpha;

  std::cout << "Details for variable " << name << std::endl;
  std::cout << "   Min and max value for type: " << std::numeric_limits<decltype(myVar)>::min() << ','
            << std::numeric_limits<decltype(myVar)>::max() << std::endl;
  std::cout << "   Type is signed: " << std::numeric_limits<decltype(myVar)>::is_signed << ". ";
  std::cout << "Non-sign bits in type: " << std::numeric_limits<decltype(myVar)>::digits << std::endl;
  std::cout << "   Type has infinity: " << std::numeric_limits<decltype(myVar)>::has_infinity << '\n';
}
// and this is some preprocessor black magic
#define print_type_info(x) (print_type_info_and_name(x, #x))

int main () 
{
  int myVar {0};
  short int myShort {0};
  long int myLong {0};
  long long int myLongLong {0};

  double myDouble {0};
  long double myLongDouble {0};

  print_type_info(myVar);
  print_type_info(myShort);
  print_type_info(myLong);
  print_type_info(myLongLong);
  print_type_info(myDouble);
  print_type_info(myLongDouble);

  return 0;
}
#+END_SRC

#+RESULTS:
#+begin_example
Details for variable myVar
   Min and max value for type: -2147483648,2147483647
   Type is signed: true. Non-sign bits in type: 31
   Type has infinity: false
Details for variable myShort
   Min and max value for type: -32768,32767
   Type is signed: true. Non-sign bits in type: 15
   Type has infinity: false
Details for variable myLong
   Min and max value for type: -9223372036854775808,9223372036854775807
   Type is signed: true. Non-sign bits in type: 63
   Type has infinity: false
Details for variable myLongLong
   Min and max value for type: -9223372036854775808,9223372036854775807
   Type is signed: true. Non-sign bits in type: 63
   Type has infinity: false
Details for variable myDouble
   Min and max value for type: 2.22507e-308,1.79769e+308
   Type is signed: true. Non-sign bits in type: 53
   Type has infinity: true
Details for variable myLongDouble
   Min and max value for type: 3.3621e-4932,1.18973e+4932
   Type is signed: true. Non-sign bits in type: 64
   Type has infinity: true
#+end_example

** and you can apply them both: size and sign modifiers:

#+BEGIN_SRC C++ :main no :flags -std=c++17 :results output :exports both
#include <iostream>     // std::cout
#include <limits>       // std::numeric_limits

//this is some C++ black magic
template <typename T>
void print_type_info_and_name(T myVar, std::string name) 
{
  std::cout << std::boolalpha;

  std::cout << "Details for variable " << name << std::endl;
  std::cout << "   Min and max value for type: " << std::numeric_limits<decltype(myVar)>::min() << ','
            << std::numeric_limits<decltype(myVar)>::max() << std::endl;
  std::cout << "   Type is signed: " << std::numeric_limits<decltype(myVar)>::is_signed << ". ";
  std::cout << "Non-sign bits in type: " << std::numeric_limits<decltype(myVar)>::digits << std::endl;
  std::cout << "   Type has infinity: " << std::numeric_limits<decltype(myVar)>::has_infinity << '\n';
}
// and this is some preprocessor black magic
#define print_type_info(x) (print_type_info_and_name(x, #x))

int main () 
{
  unsigned int myVar {0};
  unsigned long int myLong {0};
  unsigned long long int myLongLong {0};


  print_type_info(myVar);
  print_type_info(myLong);
  print_type_info(myLongLong);

  return 0;
}
#+END_SRC

#+RESULTS:
#+begin_example
Details for variable myVar
   Min and max value for type: 0,4294967295
   Type is signed: false. Non-sign bits in type: 32
   Type has infinity: false
Details for variable myLong
   Min and max value for type: 0,18446744073709551615
   Type is signed: false. Non-sign bits in type: 64
   Type has infinity: false
Details for variable myLongLong
   Min and max value for type: 0,18446744073709551615
   Type is signed: false. Non-sign bits in type: 64
   Type has infinity: false
#+end_example

*  Compiler/architecture dependencies

the standard says that:

- char can be signed or unsigned (compiler/architecture dependent)
  - arm: char is unsigned
  - x86, x64: char is signed

- the minimum sizes of integral types are compiler/architecture dependent:


| Type          | Minimum size  |
|---------------+---------------|
| short         |   16          |
| int           |   16          |
| long int      |   32          |
| long long int |   64          |


* Wide chars

- When using languages that have more than 256 characters, it is necessary to use wide characters:

- We will not use wide characters in this term

#+begin_src C++ :main no
#include <iostream>
int main(void)
{
   wchar_t  c {L'学'}; 
   
   std::cout << c << std::endl;

   return 0;
}
#+end_src

#+RESULTS:
#+begin_example
23398
#+end_example
  
  #+end_src

* 16 bits

- Char is guaranteed to be 8 bits
- But short int is not
- so we use char16_t
  - note it is an unsigned type

#+BEGIN_SRC C++ :main no :flags -std=c++17 :results output :exports both
#include <iostream>     // std::cout
#include <limits>       // std::numeric_limits

//this is some C++ black magic
template <typename T>
void print_type_info_and_name(T myVar, std::string name) 
{
  std::cout << std::boolalpha;

  std::cout << "Details for variable " << name << std::endl;
  std::cout << "   Min and max value for type: " << std::numeric_limits<decltype(myVar)>::min() << ','
            << std::numeric_limits<decltype(myVar)>::max() << std::endl;
  std::cout << "   Type is signed: " << std::numeric_limits<decltype(myVar)>::is_signed << ". ";
  std::cout << "Non-sign bits in type: " << std::numeric_limits<decltype(myVar)>::digits << std::endl;
  std::cout << "   Type has infinity: " << std::numeric_limits<decltype(myVar)>::has_infinity << '\n';
}
// and this is some preprocessor black magic
#define print_type_info(x) (print_type_info_and_name(x, #x))

int main () 
{
  char16_t c16{0}; 

  print_type_info(c16);

  return 0;
}
#+END_SRC

#+RESULTS:
#+begin_example
Details for variable c16
   Min and max value for type: 0,65535
   Type is signed: false. Non-sign bits in type: 16
   Type has infinity: false
#+end_example


* Narrowing conversions

- A narrowing conversion is one in which a value does not *fit* in destination variable
- A major source of errors
- they can be avoided using the {} initializer

#+BEGIN_SRC C++ :main no :flags -std=c++17 :results output :exports both :exports both
#include <iostream>
int main()
{
   int anInt {50000}; // ok, but 500000000000 would generate an error
   short aShort {10000}; // ok, but 100000
   unsigned long aLong {500000000000}; // ok, but -1 would generate an error
   long long aLongLong {2000000000000000000};
   float aFloat {1e10};  // 10e100 would generate an error
   double aDouble {1e7000}; // see the result below..


   std::cout << anInt << std::endl;
   std::cout << aShort << std::endl;
   std::cout << aLong << std::endl;
   std::cout << aLongLong << std::endl;
   std::cout << aFloat << std::endl;
   std::cout << aDouble << std::endl;

  return 0;
}
#+END_SRC

#+RESULTS:
#+begin_example
50000
10000
500000000000
2000000000000000000
1e+10
inf
#+end_example

* Do I care about all of this for the exam/quizzes?

- Only that you know that these types exist, and 
- the fundamental difference between signed, and unsigned.
- do the book exercises

* Type conversions

Be careful, very careful: 

Between primitive types, conversions be narrowing (lose/change information).

#+BEGIN_SRC C++ :main no :flags -std=c++17 -Wall --pedantic -Werror :results output :exports both
#include <iostream>
int main()
{
   int i {};
   double d {};
   unsigned int ui {};
   short int si {};

   std::cout << "i: " << i << "   d: " << d << "   ui: " << ui << "   si: " << si << std::endl;

   i = 10;    d = i;    ui = i;    si = i;
   std::cout << "i: " << i << "   d: " << d << "   ui: " << ui << "   si: " << si << std::endl;
   i = -10000001;    d = i;     ui = i;    si = i;
   std::cout << "i: " << i << "   d: " << d << "   ui: " << ui << "   si: " << si << std::endl;
   d = -3.141492654;    i = d;    ui = d;    si = d;
   std::cout << "i: " << i << "   d: " << d << "   ui: " << ui << "   si: " << si << std::endl;

  return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
i: 0   d: 0   ui: 0   si: 0
i: 10   d: 10   ui: 10   si: 10
i: -10000001   d: -1e+07   ui: 4284967295   si: 27007
i: -3   d: -3.14149   ui: 4294967293   si: -3
#+end_example

another example:

#+BEGIN_SRC C++ :main no :flags -std=c++17 -Wall --pedantic -Wextra -Werror :results output :exports both
#include <iostream>
int main()
{
   unsigned int u {10};
   int i {-42};

   std::cout << u -i << std::endl;
   std::cout << i -u << std::endl;
   
   return 0;

}
#+END_SRC

#+RESULTS:
#+begin_example
52
4294967244
#+end_example

Use the compiler, Luke! Pass the options to the compiler. Neither program below will compile

#+BEGIN_SRC sh
g++ -std=c++17 -Wall --pedantic -Wextra -Wsign-conversion -Wfloat-conversion -Werror -o file file.cpp
#+END_SRC


#+BEGIN_SRC C++ :main no :flags -std=c++17 -Wall --pedantic -Wextra -Wsign-conversion -Werror :results output :exports both
#include <iostream>
int main()
{
   unsigned int u {10};
   int i {-42};

   std::cout << u -i << std::endl;
   std::cout << i -u << std::endl;
   
}
#+END_SRC

#+RESULTS:

#+BEGIN_SRC C++ :main no :flags -std=c++17 -Wall --pedantic -Wextra -Wsign-conversion -Wfloat-conversion -Werror :results output :exports both
#include <iostream>
int main()
{
   int i {0};

   i = 3.5;
  
   std::cout << i << std::endl;

   return 0;
   
}
#+END_SRC

#+RESULTS:

What about strings? what are the composed of? *char*

#+BEGIN_SRC C++ :main no :flags -std=c++17 -Wall --pedantic -Werror :results output :exports both
#include <iostream>
#include <string>
#include <limits>       // std::numeric_limits

//this is some C++ black magic
template <typename T>
void print_type_info_and_name(T myVar, std::string name) 
{
  std::cout << std::boolalpha;

  std::cout << "Details for variable " << name << std::endl;
  std::cout << "   Min and max value for type: " << std::numeric_limits<decltype(myVar)>::min() << ','
            << std::numeric_limits<decltype(myVar)>::max() << std::endl;
  std::cout << "   Type is signed: " << std::numeric_limits<decltype(myVar)>::is_signed << ". ";
  std::cout << "Non-sign bits in type: " << std::numeric_limits<decltype(myVar)>::digits << std::endl;
  std::cout << "   Type has infinity: " << std::numeric_limits<decltype(myVar)>::has_infinity << '\n';
}
// and this is some preprocessor black magic
#define print_type_info(x) (print_type_info_and_name(x, #x))

int main()
{
   std::string st {"a"};
   print_type_info(st.at(0));
   return 0;

} 
#+END_SRC

#+RESULTS:
#+begin_example
Details for variable st.at(0)
   Min and max value for type: ,
   Type is signed: true. Non-sign bits in type: 7
   Type has infinity: false
#+end_example

** Forcing the type of a constant 

- Use suffixes for long and unsigned


#+BEGIN_SRC C++ :main no :flags -std=c++17 -Wall --pedantic -Werror :results output :exports both
#include <iostream>
int main()
{
   long int i {0L};
   unsigned short int shortInt{4U}; // no suffix for shorts
   long long int longlongInt{3LLU};
   std::cout << i << " " << shortInt << " " << longlongInt;
   return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
0 4 3
#+end_example


** Corollary:

- Never mix signed and unsigned types
- Make sure your variable can handle the maximum values you plan to use

