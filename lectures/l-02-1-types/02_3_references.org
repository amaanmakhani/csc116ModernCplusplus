#+STARTUP: showall
#+STARTUP: lognotestate
#+TAGS:
#+SEQ_TODO: TODO STARTED DONE DEFERRED CANCELLED | WAITING DELEGATED APPT
#+DRAWERS: HIDDEN STATE
#+TITLE: References and Mutability
#+CATEGORY: 
#+PROPERTY: header-args: lang           :varname value
#+PROPERTY: header-args:sqlite          :db /path/to/db  :colnames yes
#+PROPERTY: header-args:C++             :results verbatim :exports both :flags -std=c++14 -Wall --pedantic -Werror
#+PROPERTY: header-args:R               :results output :exports both  :colnames yes

** Table of Contents                                                    :TOC:
- [[#new-concept-functions-as-first-class-citizens][New concept: functions as first class citizens]]
  - [[#first-some-new-syntax][First some new syntax]]
  - [[#but-do-we-need-to-parameterize-j][But, do we need to parameterize j?]]
  - [[#use-auto-except-when-you-need-recursion][use auto (except when you need recursion)]]
  - [[#what-does-this-output][What does this output?]]
- [[#scope-again][Scope again]]
- [[#references][References]]
- [[#also-true-for-traversing-collections-for-auto][Also true for traversing collections (for auto)]]
  - [[#another-example][Another example]]
- [[#we-can-also-declare-variables-that-are-references-to-variables][We can also declare variables that are references to variables]]
- [[#const][Const]]
- [[#const-global-variables][const global variables]]
  - [[#in-parameters-to-functions][In parameters to functions]]
  - [[#extends-to-references][Extends to references]]
  - [[#so-why-then-use-references-for-const-parameters][So why then use references for const parameters?]]

* New concept: functions as first class citizens

- In old C++ functions could not be written inside functions
- Defeats the purpose of scoping

#+BEGIN_SRC C++ :results verbatim :export both
#include <iostream>

// we need to pass all parameters
void my_function(int i, int j)
{
   std::cout << i << " " << j << std::endl;
}

int main()
{
   int i {-5};
   int j {1};
   int k {100};

   my_function(i,j);
   my_function(k,j);

   return 0;
}

#+END_SRC

v#+RESULTS:
#+begin_example
-5 1
100 1
#+end_example

** First some new syntax

#+BEGIN_SRC C++ :results verbatim :export both
#include <iostream>
#include <functional>

// we need to pass all parameters
//void my_function(int i, int j)
std::function<void(int,int)> my_function = [&](int i, int j) {
   std::cout << i << " " << j << std::endl;
};

int main()
{

   int i {-5};
   int j {1};
   int k {100};

   my_function(i,j);
   my_function(k,j);

   return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
-5 1
100 1
#+end_example

** But, do we need to parameterize j?

No, if we make j be part of the environment of my_function


#+BEGIN_SRC C++ :results verbatim :export both
#include <iostream>
#include <functional>

// we need to pass all parameters
int main()
{

   int i {-5};
   int j {1};
   int k {100};

   std::function<void(int)> my_function = [&](int n) {
      std::cout << n << " " << j << std::endl;
      my_function(3);
   };

   my_function(i);
   my_function(k);

   return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
-5 1
100 1
#+end_example

** use auto (except when you need recursion) 

#+BEGIN_SRC C++ :export both :results verbatim
#include <iostream>
#include <functional>


int main()
{

   int i {-5};
   int j {1};
   int k {100};

   auto my_function = [&](int n) {
       std::cout << n << " " << j << std::endl;
   };
   my_function(i);
   my_function(k);

   return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
-5 1
100 1
#+end_example



** What does this output?

- apply the same scoping rules as before

#+BEGIN_SRC C++ :export both :results verbatim
#include <iostream>
#include <functional>
int i {0};

auto execute(std::function<void()> action) {
   int i {5};
   action();
};
int main()
{
   auto before = [&]() {
       std::cout << "In before: " << i << std::endl;
   };

   int i {-1};

   auto after = [&]() {
       std::cout << "In after: " << i << std::endl;
   };
   execute(before);
   execute(after);

   return 0;
}
#+END_SRC

* Scope again

- in C++ parameters are new variables (copy-by-value)
- they are independent of the variables passed as parameters in the call

#+BEGIN_SRC C++ :main no :flags -std=c++14 -Wall --pedantic -Werror :results output :exports both
#include <iostream>

void my_function(int i)
{
   i++;
   std::cout << "inside " << i << std::endl;
}

int main()
{
   int i {-5};
   std::cout << "Before " << i << std::endl;
   my_function(i);
   std::cout << "After "<< i << std::endl;

   return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
Before -5
inside -4
After -5
#+end_example


* References

- they allow modification of a parameter
- they are "like" a pointer, but safer
- A reference is variable that points to another one

#+BEGIN_SRC C++ :main no :flags -std=c++14 -Wall --pedantic -Werror :results output :exports both
#include <iostream>

void my_function(int &r)
{
   r--;
   std::cout << "inside " << r << std::endl;
}

int main()
{
   int i {0};
   std::cout << "Before " << i << std::endl;
   my_function(i);
   std::cout << "After "<< i << std::endl;

   return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
Before 0
inside -1
After -1
#+end_example

* Also true for traversing collections (for auto)

- Note how the scope of the for loop creates local variables (copies)
- References can be used to modify the original value 

#+BEGIN_SRC C++ :main no :flags -std=c++14 -Wall --pedantic -Werror :results output :exports both
#include <iostream>
#include <string>
#include <vector>

int main()
{
    std::string   var {"abc"};

    std::cout << "Before: " << var << std::endl;

    for(auto c : var) {
       c++;
    }
    std::cout << "After: " << var << std::endl;

    for(auto &c : var) {
       c++;
    }
    std::cout << "After2: " << var << std::endl;

    return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
Before: abc
After: abc
After2: bcd
#+end_example

#+BEGIN_SRC C++ :main no :flags -std=c++14 -Wall --pedantic -Werror :results output :exports both
#include <iostream>
#include <string>
#include <vector>

// some black magic, ignore for now
template <typename T>
void print_vector(std::vector<T> v) 
{
    for(auto item : v) {
       std::cout <<  item << "," ;
    }
    std::cout << std::endl;
}

int main()
{
    std::vector<unsigned int>   var {1, 2, 3, 4};

    print_vector(var);

    for(auto c : var) {
       c += 10;
    }
    print_vector(var);

    for(auto &c : var) {
       c += 10;
    }
    print_vector(var);

    return 0;
}

#+END_SRC


#+RESULTS:
#+begin_example
1,2,3,4,
1,2,3,4,
11,12,13,14,
#+end_example


** Another example

#+BEGIN_SRC C++ :main no :flags -std=c++14 -Wall --pedantic -Werror :results output :exports both
#include <iostream>
#include <functional>

//void print_value(int value)
std::function<void(int)> print_value = [&] (int value) {
   value +=10;
   std::cout << "Value " << value << std::endl;
};

//void print_value2(int &value)
std::function<void(int&)> print_value2 = [&] (int &value) 
{ 
   value +=10;
   std::cout << "Value " << value << std::endl;
};


int main()
{
   int i {-4};

   print_value(i);
   print_value(i);
   print_value2(i);
   print_value(i);

   return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
Value 6
Value 6
Value 6
Value 16
#+end_example


* We can also declare variables that are references to variables

#+BEGIN_SRC C++ :main no :flags -std=c++14 -Wall --pedantic -Werror :results output :exports both
#include <iostream>
#include <iomanip>

int main()
{
   unsigned int i {4};
   unsigned int j {10};
   unsigned int &r {i};

   auto print = [&] () { 
       std::cout << "i: " << std::setw(2) << i << 
                   " j: " << std::setw(2) << j << 
                   " r: " << std::setw(2) << r << std::endl;
   };

   print ();
   r++; print ();
   r = j; print();
   r = 9; print ();
   i = 20; print();

   return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
i:  4 j: 10 r:  4
i:  5 j: 10 r:  5
i: 10 j: 10 r: 10
i:  9 j: 10 r:  9
i: 20 j: 10 r: 20
#+end_example


* Const

It can be used to indicate that a variable should never change: it is *immutable*

#+BEGIN_SRC C++ :main no :flags -std=c++14 -Wall --pedantic -Werror :results output :exports both
#include <iostream>

int main()
{
   const int i {10};

   i = 20; // will fail
   return 0;
}

#+END_SRC

#+RESULTS:

#+BEGIN_EXAMPLE
/tmp/babel-3815z2J/C-src-3815Zpt.cpp: In function ‘int main()’:
/tmp/babel-3815z2J/C-src-3815Zpt.cpp:13:8: error: assignment of read-only variable ‘i’
    i = 20; // will fail
        ^~
#+END_EXAMPLE


* const global variables

- this is the one of the few reasons you would like to have a global variable
- Google preferred way to name 
 https://google.github.io/styleguide/cppguide.html
- prefix name with k


#+BEGIN_SRC C++ :main no :flags -std=c++14 -Wall --pedantic -Werror :results output :exports both
const int kDaysInAWeek = 7;

int main()
{
   return 0;
}
#+END_SRC


** In parameters to functions

- indicate that you can't modify a parameter
- in general, this is a good idea

#+BEGIN_SRC C++ :main no :flags -std=c++14 -Wall --pedantic -Werror :results output :exports both
#include <iostream>

void print_value(const int value)
{
   value +=10; // not allowed
   std::cout << "Value " << value << std::endl;
}

int main()
{
   print_value(10);
   
   return 0;
}

#+END_SRC

#+BEGIN_EXAMPLE
/tmp/babel-3815z2J/C-src-3815zLi.cpp: In function ‘void print_value(int)’:
/tmp/babel-3815z2J/C-src-3815zLi.cpp:11:12: error: assignment of read-only parameter ‘value’
    value +=10; // not allowed
#+END_EXAMPLE
#+RESULTS:

** Extends to references

- once you define a reference const, you can't change the value it refers to

#+BEGIN_SRC C++ :main no :flags -std=c++14 -Wall --pedantic -Werror :results output :exports both
#include <iostream>

int main()
{
   int i { 5 };
   const int &r {i};
   i= 10;   // ok
   r = 20;  // invalid
   return 0;
}

#+END_SRC

#+RESULTS:

#+BEGIN_EXAMPLE
/tmp/babel-3815z2J/C-src-3815NuW.cpp: In function ‘int main()’:
/tmp/babel-3815z2J/C-src-3815NuW.cpp:14:8: error: assignment of read-only reference ‘r’
    r = 20;  // invalid
#+END_EXAMPLE


- this is for a parameter, indicates that even we got a reference, it is immutable
- signals to the person using the function that the parameter is not going to be changed

#+BEGIN_SRC C++ :main no :flags -std=c++14 -Wall --pedantic -Werror :results output :exports both
#include <iostream>


void print_value(const int &value)
{
   value +=10; // not allowed
   std::cout << "Value " << value << std::endl;
}

int main()
{
   int i { 5 };
   print_value(i);
   return 0;
}

#+END_SRC

#+BEGIN_EXAMPLE
/tmp/babel-2558967A/C-src-25589a3A.cpp: In function ‘void print_value(const int&)’:
/tmp/babel-2558967A/C-src-25589a3A.cpp:13:12: error: assignment of read-only reference ‘value’
    value +=10; // not allowed
            ^~
zsh:1: permission denied: /tmp/babel-2558967A/C-bin-25589nBH
#+END_EXAMPLE


** So why then use references for const parameters?

- Because in general it is cheaper (faster) to pass a reference than a copy
- specially for complex values
