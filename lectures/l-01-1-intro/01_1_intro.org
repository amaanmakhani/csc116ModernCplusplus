#+STARTUP: showall
#+STARTUP: lognotestate
#+TAGS:
#+SEQ_TODO: TODO STARTED DONE DEFERRED CANCELLED | WAITING DELEGATED APPT
#+DRAWERS: HIDDEN STATE
#+TITLE: Lecture 1 csc116
#+CATEGORY: 
#+PROPERTY: header-args: lang           :varname value
#+PROPERTY: header-args:sqlite          :db /path/to/db  :colnames yes
#+PROPERTY: header-args:R               :results output  :colnames yes
#+PROPERTY: header-args:C++             :results output  :flags -std=c++14 -Wall --pedantic -Werror

** Table of contents                                                    :TOC:
- [[#what-is-c][What is c++]]
  - [[#the-c-we-are-going-to-learn][The C++ we are going to learn]]
  - [[#simpler-constructs-than-c][Simpler constructs than C]]
- [[#learning-a-language][Learning a language]]
- [[#c-example][C++ Example:]]
- [[#simplest-program][Simplest program]]
- [[#hello-world][Hello world]]
- [[#readwrite-fromto-standard-inputoutput][Read/write from/to standard input/output]]
- [[#type-safety][Type safety]]
- [[#vectors-not-arrays][Vectors not Arrays]]
  - [[#they-are-safer-to-use][They are safer to use]]
  - [[#use-at][Use .at()]]
  - [[#why-hardcode-the-length][Why hardcode the length?]]
- [[#nah-these-for-loops-are-obsolete-use-an-iterator][Nah, these "for" loops are obsolete, use an iterator]]
- [[#but-they-also-make-for-very-generic-code][But they also make for very generic code]]
- [[#c-has-a-large-set-of-algorithms][C++ has a large set of "algorithms"]]
  - [[#algorithms-are-generic][Algorithms are generic]]
  - [[#we-can-also-accumulate-strings][We can also accumulate strings:]]
- [[#but-wait-there-is-more-we-can-create-our-own-generic-algorithms][But wait, there is more: we can create our own generic algorithms]]
- [[#conclusion][Conclusion]]

* What is c++

- Type safe
- Object oriented
- Functional programming features
- Powerful standard library
  - data types
  - algorithms
- Generic programming
- Much, much better than C

** The C++ we are going to learn

- Modern C++
- also known as C++ 14 
- Do not waste your time learning older C++


** Simpler constructs than C

| std::vector<type>  |
| std::string        |
| auto variables     |
| improved for loops |


* Learning a language

- Learn the syntax
- Learn the semantics
- Learn the idioms
- Learn the tools

* C++ Example: 

- count frequency of elements in an "array" (a vector)

#+BEGIN_SRC C++ :main no :flags -std=c++14 :results output
#include <iostream>
#include <map>
#include <vector>
#include <string>
#include <algorithm>

int main()
{
   std::vector<std::string> names {"Canada", "Japan", "Spain", "Japan", "Italy", "Canada", "Japan"};
   std::map <std::string, int> frequency {};
   for (auto n : names) {
       frequency[n] ++;
   }
   for (auto f : frequency) {
       std::cout << "The frequency of " << f.first << " is " << f.second << std::endl;
   }
   std::cout << "--------------------" << std::endl;
   std::for_each(frequency.begin(), 
                 frequency.end(), 
                 [](auto &a){ std::cout << "The frequency of " << a.first << " is " << a.second << std::endl;});
   return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
The frequency of Canada is 2
The frequency of Italy is 1
The frequency of Japan is 3
The frequency of Spain is 1
--------------------
The frequency of Canada is 2
The frequency of Italy is 1
The frequency of Japan is 3
The frequency of Spain is 1
#+end_example


* Simplest program

#+BEGIN_SRC C++
int main()
{
    return 10;
}
#+END_SRC

#+RESULTS:

Demo exit code (run in the command line)

t
#+BEGIN_SRC sh
./hello
echo $?
#+END_SRC

* Hello world

#+BEGIN_SRC C++ :exports both
#include <iostream>

int main()
{
    std::cout << "Hello world" << std::endl;
    return 0;
}
#+END_SRC

#+RESULTS:
#+begin_example
Hello world
#+end_example

* Read/write from/to standard input/output

This is the input to read

#+BEGIN_EXAMPLE
daniel
5
#+END_EXAMPLE


#+header: :stdin input
#+BEGIN_SRC C++ :exports both :cmdline < dmg.txt :results output
#include <iostream>
#include <string>

int main()
{
    std::string name;
    int times;
    std::getline(std::cin, name); // read entire line, stripping end of line
    std::cin >> times;  // read next number
                        // skipping whitespace... 
 
    for(unsigned int i=0;i<times;i++) {
       std::cout << "Hello " << name << " " << times << " times " << std::endl;
    }

    return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
Hello daniel german 4 times 
Hello daniel german 3 times 
Hello daniel german 2 times 
Hello daniel german 1 times 
Hello daniel german 0 times
#+end_example



* Type safety

#+BEGIN_SRC C++ :exports both :results output  :flags -std=c++14 -Wall --pedantic -Werror
#include <iostream>

int main()
{
    int i { 3};
    std::cout << "Value of i is " << i << std::endl;
    return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
Value of i is 3
#+end_example

This program generates a compilation error

#+BEGIN_SRC C++ :exports both :results output  :flags -std=c++14 -Wall --pedantic -Werror -pedantic-errors
#include <iostream>

int main()
{
    int i {3.5};
    std::cout << "Value of i is " << i << std::endl;
    return 0;
}

#+END_SRC

#+BEGIN_EXAMPLE
/tmp/babel-28753sEf/C-src-287531bh.cpp: In function ‘int main()’:
/tmp/babel-28753sEf/C-src-287531bh.cpp:12:15: error: narrowing conversion of ‘3.5e+0’ from ‘double’ to ‘int’ inside { } [-Wnarrowing]
     int i {3.5};

#+END_EXAMPLE

But this one compiles and runs:

#+BEGIN_SRC C++ :exports both :results output  :flags -std=c++14 -Wall --pedantic -Werror -pedantic-errors
#include <iostream>

int main()
{
    int i  = 3.5;
    std::cout << "Value of i is " << i << std::endl;
    return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
Value of i is 3
#+end_example


* Vectors not Arrays

- Do not use arrays in C++
- Instead, use a vector

#+BEGIN_SRC C++ :exports both :results output  :flags -std=c++14 -Wall --pedantic 
#include <iostream>
#include <vector>

int main()
{
    std::vector<int> numbers {1, 2, 3, 4, 5};

    for(unsigned int i {0};i<5;i++) {
        std::cout << numbers[i] << std::endl;
    }

    return 0;
}
#+END_SRC

#+RESULTS:
#+begin_example
1
2
3
4
5
#+end_example

** They are safer to use

The following program has a bug, can you identify it?

#+BEGIN_SRC C++ :exports both :results output  :flags -std=c++14 -Wall --pedantic 
#include <iostream>
#include <vector>

int main()
{
    std::vector<int> numbers {1, 2, 3, 4, 5};

    for(unsigned int i {1};i<=5;i++) {
        std::cout << numbers[i] << std::endl;
    }

    return 0;
}
#+END_SRC

#+RESULTS:
#+begin_example
2
3
4
5
0
#+end_example

** Use .at()

- For the purpose of this course, never use [] to access elements of an array
- Instead, use .at()

#+BEGIN_SRC C++ :exports both :results output  :flags -std=c++14 -Wall --pedantic 
#include <iostream>
#include <vector>

int main()
{
    std::vector<int> numbers {1, 2, 3, 4, 5};

    for(unsigned int i {1};i<=5;i++) {
        std::cout << numbers.at(i) << std::endl;
    }

    return 0;
}
#+END_SRC

#+RESULTS:

#+BEGIN_EXAMPLE
terminate called after throwing an instance of 'std::out_of_range'
  what():  vector::_M_range_check: __n (which is 5) >= this->size() (which is 5)
#+END_EXAMPLE

** Why hardcode the length?

- use .size()


#+BEGIN_SRC C++ :exports both :results output  :flags -std=c++14 -Wall --pedantic 
#include <iostream>
#include <vector>

int main()
{
    std::vector<int> numbers {1, 2, 3, 4, 5};

    for(int i {0};i<numbers.size();i++) {
        std::cout << numbers.at(i) << std::endl;
    }

    return 0;
}
#+END_SRC

#+RESULTS:
#+begin_example
1
2
3
4
5
#+end_example

* Nah, these "for" loops are obsolete, use an iterator

- after all, control  variables of for loops are a big source of bugs


#+BEGIN_SRC C++ :exports both :results output  :flags -std=c++14 -Wall --pedantic 
#include <iostream>
#include <vector>

int main()
{
    std::vector<int> numbers {1, 2, 3, 4, 5};

    int sum {};
    for(auto n:numbers) { // iterate over each value
        sum += n;
    }
    std::cout << "The sum is "<< sum << std::endl;
    return 0;
}
#+END_SRC

#+RESULTS:
#+begin_example
The sum is 15
#+end_example

* But they also make for very generic code

- We don't have to change the loop, and still works for strings
- see how strings are defined
- note semantics of + when dealing with strings

#+BEGIN_SRC C++ :exports both :results output  :flags -std=c++14 -Wall --pedantic 
#include <iostream>
#include <vector>

int main()
{
    std::vector<std::string> numbers {"1", "2", "3", "4", "5"};

    std::string sum {};
    for(auto n:numbers) {
        sum += n;
    }
    std::cout << "The sum is "<< sum << std::endl;
    return 0;
}
#+END_SRC


#+RESULTS:
#+begin_example
The sum is 12345
#+end_example

* C++ has a large set of "algorithms"

- Why reinvent the wheel? 
- Adding the elements of an array is something that needs to be done frequently
- use std::accumulate

#+BEGIN_SRC C++ :exports both :main no :flags -std=c++14 :results output -Wall -pedantic
#include <iostream>
#include <vector>
#include <numeric>
int main()
{
    std::vector<int> numbers {1, 2, 3, 4, 5, 6};

    // add the values from first to last, with initial value of 0
    auto sum = std::accumulate(numbers.begin(), numbers.end(), 0);

    std::cout << "the sum of the vector is " << sum << std::endl;
    return 0;

}

#+END_SRC

#+RESULTS:
#+begin_example
the sum of the vector is 21
#+end_example

** Algorithms are generic

- What if we want to use complex numbers instead of integers? 
- Note how the initialization converts an int to a complex. 
- But we can also initialize complex numbers

#+BEGIN_SRC C++ :exports both :main no :flags -std=c++14 :results output -Wall -pedantic
#include <iostream>
#include <vector>
#include <numeric>
#include <complex>
int main()
{
    std::vector<std::complex<int>> numbers {1, 2, 3, 4, 5, {6,-1}};

    auto sum = std::accumulate(numbers.begin(), numbers.end(), std::complex<int>{0});

    std::cout << "the sum of the vector is " << sum << std::endl;
    return 0;

}
#+END_SRC

#+RESULTS:
#+begin_example
the sum of the vector is (21,-1)
#+end_example

** We can also accumulate strings:

#+BEGIN_SRC C++ :exports both :main no :flags -std=c++14 :results output -Wall -pedantic
#include <iostream>
#include <vector>
#include <numeric>
#include <complex>
int main()
{
    std::vector<std::string> numbers {"1", "2", "3", "4", "5", "6"};

    auto sum = std::accumulate(numbers.begin()+1, numbers.end(), std::string{""});

    std::cout << "the sum of the vector is " << sum << std::endl;
    return 0;

}

#+END_SRC

#+RESULTS:
#+begin_example
the sum of the vector is 23456
#+end_example

* But wait, there is more: we can create our own generic algorithms

- Sometimes we really need the index to a vector element
- But we know that incrementing indices to vectors is error prone
- This will look like black magic now, but by the end of the term it should make sense

#+BEGIN_SRC C++ :exports both :main no :flags -std=c++14 :results output -Wall -pedantic
#include <iostream>
#include <string>
#include <vector>
#include <functional>

template<typename T>
void for_with_index(T& container, std::function<void(size_t, typename T::value_type&)> op)
{
    size_t idx = 0;
    for(auto& value : container)
        op(idx++, value);
}

int main()
{
    std::vector<std::string> sv {"a", "b", "c"};
    // use a lambda, first parm is the index, second the vector
    for_with_index(sv, [](auto i, auto v) {
        std::cout << i << " " << v << std::endl;
        i++;
    });
}
#+END_SRC

#+RESULTS:
#+begin_example
1 a
2 b
3 c
#+end_example


* Conclusion

- C++ is much more powerful than C
- Complex semantics (and some extra syntax)
- Lots of powerful data structures 
- Type-safe
- Generic
