#+STARTUP: showall
#+STARTUP: lognotestate
#+TAGS:
#+SEQ_TODO: TODO STARTED DONE DEFERRED CANCELLED | WAITING DELEGATED APPT
#+DRAWERS: HIDDEN STATE
#+TITLE: i/o
#+CATEGORY: 
#+PROPERTY: header-args:sql             :engine postgresql  :exports both :cmdline csc370
#+PROPERTY: header-args:sqlite          :db /path/to/db  :colnames yes
#+PROPERTY: header-args:C++             :results output :flags -std=c++14 -Wall --pedantic -Werror
#+PROPERTY: header-args:R               :results output  :colnames yes


#+BEGIN_SRC emacs-lisp
(setq org-image-actual-width 1500)
#+END_SRC

#+RESULTS:
#+begin_example
1500
#+end_example

* Input/output classes

[[./iostream.gif]]




* Base Classes for io

| class   | standard purpose | objects    | methods     |
|---------+------------------+------------+-------------|
| istream | input            | cin        | >>, getline |
| ostream | output           | cout, cerr | <<          |


* Subclasses 

- Subclasses derive many of their characteristics from their ancestor classes

| subclasses    | base class | purpose             |
|---------------+------------+---------------------|
| ifstream      | istream    | input from a file   |
| istringstream | istream    | input from a string |
| ofstream      | ostream    | output to a file    |
| ostringstream | ostream    | output to a string  |


* No copy or assignment for IO objects

We cannot copy objects of type IO:

#+BEGIN_SRC C++ :main no :flags -std=c++14 -Wall --pedantic -Werror :results output :exports both
ofstream out1, out2;
out 1 = out2; // error 
#+END_SRC

* Condition states of IO

Methods to detect error conditions:

| method   | description                             |
|----------+-----------------------------------------|
| .eof()   | true if end-of-file has been reached    |
| .bad()   | true if stream is corrupted             |
| .fail()  | true if stream is in error or corrupted |
| .good()  | true if stream is in a valid state      |
| .clear() | reset all conditions to a valid state   |

* Open

#+BEGIN_SRC C++ :main no :flags -std=c++14 -Wall --pedantic -Werror :results output :exports both
#include <iostream>
#include <fstream>
#include <string>
int main(int argc, char* argv[])
{
   std::ifstream in("/home/dmg/.Rprofile");  
   if (in) { // we can also use if(in.is_open())
      std::string line;
      while (std::getline(in, line)) {
         std::cout << line << std::endl;
      }
   }
   return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
options(repos=structure(c(CRAN="http://cran.stat.sfu.ca")))
options(width=160)
#+end_example

#+BEGIN_SRC C++ :main no :flags -std=c++14 -Wall --pedantic -Werror :results output :exports both
#include <iostream>
#include <fstream>
#include <string>
int main(int argc, char* argv[])
{
   std::ifstream in;
   in.open("/home/dmg/.Rprofile");
   if (in) { // we can also use if(in.is_open())
      std::string line;
      while (std::getline(in, line)) {
         std::cout << line << std::endl;
      }
   }
   return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
options(repos=structure(c(CRAN="http://cran.stat.sfu.ca")))
options(width=160)
#+end_example


* Close

- The stream destructor closes the file
- It can be explicitly closed with .close()


* formatted output: Manipulators

- We have been using << for a while
- we can modify its behaviour
- Use <iomanip>

** std::setw

- set width of output, aligned to the right

#+BEGIN_SRC C++ :main no :flags -std=c++14 -Wall --pedantic -Werror :results output :exports both
#include <iostream>
#include <iomanip>  
int main()
{
   std::cout<<"Example: [" << std::setw(10)<< 77 << "]" << std::endl;
   std::cout<<"Example: [" << std::setw(10)<< "abc" << "]" << std::endl;
   return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
Example: [        77]
Example: [       abc]
#+end_example

** left/right justified

#+BEGIN_SRC C++ :main no :flags -std=c++14 -Wall --pedantic -Werror :results output :exports both
// modify adjustfield using manipulators
#include <iostream>     // std::cout, std::internal, std::left, std::right
#include <iomanip>  

int main () {
   int n = -77;
   std::cout << std::setw(6); 
   std::cout << std::left << n << "|" << std::endl;
   std::cout <<  n << "|" << std::endl;

   std::cout << std::setw(6); 
   std::cout << std::right << n << "|" << std::endl;
   return 0;
}
#+END_SRC

#+RESULTS:
#+begin_example
-77   |
-77|
   -77|
#+end_example

** setfill

Fill with a character rather than space

#+BEGIN_SRC C++ :main no :flags -std=c++14 -Wall --pedantic -Werror :results output :exports both
// setfill example
#include <iostream>     // std::cout, std::endl
#include <iomanip>      // std::setfill, std::setw

int main () {
  std::cout << std::setfill ('_') ;
  std::cout<<"Example: [" << std::setw(10)<< 77 << "]" << std::endl;

  return 0;
}
#+END_SRC

#+RESULTS:
#+begin_example
Example: [________77]
#+end_example


** std::setbase

- Output numbers in different bases:

#+BEGIN_SRC C++ :main no :flags -std=c++14 -Wall --pedantic -Werror :results output :exports both
#include <iostream>
#include <iomanip>  
int main()
{
   int i {257};
   std::cout<<"decimal    : [" << i  << "]" << std::endl;
   std::cout<<"hexadecimal: [" << std::setbase(16) << i << "]" << std::endl;
   std::cout<<"octal:       [" << std::setbase(8) << i << "]" << std::endl;
   return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
decimal    : [257]
hexadecimal: [101]
octal:       [401]
#+end_example


** showbase, noshowbase

 In C++ we print hex numbers with prefix 0x and octal with 0

#+BEGIN_SRC C++ :main no :flags -std=c++14 -Wall --pedantic -Werror :results output :exports both
#include <iostream>     // std::cout, std::showbase, std::noshowbase

int main () {
  int n = 20;
  std::cout << "Hex:   " << std::hex << n << std::endl;
  std::cout << "Octal: " << std::oct << n << std::endl;
  std::cout << std::showbase;
  std::cout << "Hex:   " << std::hex << n << std::endl;
  std::cout << "Octal: " << std::oct << n << std::endl;
  
  std::cout << std::noshowbase;
  std::cout << n << std::endl;
  return 0;
}
#+END_SRC

#+RESULTS:
#+begin_example
Hex:   14
Octal: 24
Hex:   0x14
Octal: 024
24
#+end_example

** boolalpha/nobooalpha

Print boolean values with true/false

#+BEGIN_SRC C++ :main no :flags -std=c++14 -Wall --pedantic -Werror :results output :exports both
#include <iostream>     // std::cout, std::showbase, std::noshowbase

int main () {
  std::cout << true << " " << false << std::endl;
  std::cout << std::boolalpha;
  std::cout << true << " " << false << std::endl;
  std::cout << std::noboolalpha;
  std::cout << true << " " << false << std::endl;
  return 0;
}
#+END_SRC

#+RESULTS:
#+begin_example
1 0
true false
1 0
#+end_example

** setprecision

number of digits of precission 

#+BEGIN_SRC C++ :main no :flags -std=c++14 -Wall --pedantic -Werror :results output :exports both
// setprecision example
#include <iostream>     // std::cout, std::fixed
#include <iomanip>      // std::setprecision
#include <cmath>

int main () {
  double a =M_PI;
  double b = 2006;
  double c = 1.0e-10;
  std::cout << a <<  " "  << b << " " << c << std::endl;
  std::cout << std::setprecision(3);
  std::cout << a <<  " "  << b << " " << c << std::endl;
  return 0;
}
#+END_SRC

#+RESULTS:
#+begin_example
3.14159 2006 1e-10
3.14 2.01e+03 1e-10
#+end_example

** fixed/scientific

#+BEGIN_SRC C++ :main no :flags -std=c++14 -Wall --pedantic -Werror :results output :exports both
// setprecision example
#include <iostream>     // std::cout, std::fixed
#include <iomanip>      // std::setprecision
#include <cmath>

int main () {
  double a =M_PI;
  double b = 2006;
  double c = 1.0e-10;
  std::cout << a <<  " "  << b << " " << c << std::endl;
  std::cout << std::fixed;
  std::cout << a <<  " "  << b << " " << c << std::endl;
  std::cout << std::scientific;
  std::cout << a <<  " "  << b << " " << c << std::endl;
  std::cout << std::defaultfloat;
  std::cout << a <<  " "  << b << " " << c << std::endl;
  return 0;
}
#+END_SRC

#+RESULTS:
#+begin_example
3.14159 2006 1e-10
3.141593 2006.000000 0.000000
3.141593e+00 2.006000e+03 1.000000e-10
3.14159 2006 1e-10
#+end_example


** force period

#+BEGIN_SRC C++ :main no :flags -std=c++14 -Wall --pedantic -Werror :results output :exports both
// modify showpoint flag
#include <iostream>     // std::cout, std::showpoint, std::noshowpoint

int main () {
  double a = 30;
  double b = 100.0;
  double pi = 3.1416;

  std::cout.precision (5);
  std::cout <<   std::showpoint << a << '\t' << b << '\t' << pi << std::endl;
  std::cout << std::noshowpoint << a << '\t' << b << '\t' << pi << std::endl;
  return 0;
}
#+END_SRC

#+RESULTS:
#+begin_example
30.000	100.00	3.1416
30	100	3.1416
#+end_example


** locale

this example is for demonstration purposes (not in the exam)

we can take advantage of the locale to output information in the local language

#+BEGIN_SRC C++ :main no :flags -std=c++14 -Wall --pedantic -Werror :results output :exports both
#include <iostream>
#include <iomanip>
#include <ctime>
 
int main()
{
    std::time_t t = std::time(nullptr);
    std::tm tm = *std::localtime(&t);
    std::cout.imbue(std::locale("en_CA.utf8"));
    std::cout << "en_CA: " << std::put_time(&tm, "%A %B %c %Z") << '\n';
    std::cout.imbue(std::locale("ja_JP.utf8"));
    std::cout << "ja_JP: " << std::put_time(&tm, "%A %B %c %Z") << '\n';
}
#+END_SRC

#+RESULTS:
#+begin_example
en_CA: Tuesday October Tue 17 Oct 2017 09:47:55 AM PDT PDT
ja_JP: 火曜日 10月 2017年10月17日 09時47分55秒 PDT
#+end_example


* File Modes

| in     | open for input                                   | Only for ifstream or fstream |
| app    | Append to file when open an output file          | Only for ofstream or fstream  |
| ate    | Go go the end of file when open a file for input |                              |
| trunc  | truncate file                                    |                              |
| binary | do I/O operations in binary mode                 |                              |

- output files are set to trunc by default
- if needed, open with app to write at end of file
- many more rules...

** how to use
   
#+BEGIN_SRC C++ 
std::ofstream out("file");
std::ofstream out("file", std::ofstream:out); //implicit
std::ofstream out("file", std::ofstream:out | std::ofstream::trunc); 

out.open("file",std::ofstream:out);
#+END_SRC


* Reading using >> (for text files)

- "Extract formatted output" operator
- Using >> "parses" the input
- its behaviour depends on the type of what you read
- For example:
  - reading a std::string, skips spaces
  - reading a number skips non-numeric characters

For this part we will use the following file:

#+BEGIN_SRC sh :results output
cat groceries3.txt
#+END_SRC

#+RESULTS:
#+begin_example
   20potatoes
   10apples

carrot      mangos

oranges
#+end_example

Example:

- Note how the whitespace is skipped

#+BEGIN_SRC C++ :main no :flags -std=c++14 -Wall --pedantic -Werror :results output :exports both
#include <iostream>
#include <fstream>
#include <iomanip>
int main()
{
   std::string st {};
   int i {};
   std::ifstream myfile ("groceries3.txt");
   //std::ifstream myfile ("groceriesUnix.txt");
   if(!myfile) throw std::runtime_error("unable to open input file");
   std::streamoff pos;

   while (pos = myfile.tellg(), //store location
          myfile >> st) {        // read 
      auto posAfter =  myfile.tellg();
      std::cout << std::setw(3) << std::left << i++ << std::right 
                << " File position before " << std::setw(3) << pos
                << " after " << std::setw(3) << posAfter 
                << " skipped " << std::setw(3) << int(posAfter - pos) - st.size()
                << " [" << st << "]" <<std::endl;
   }

   return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
0   File position before   0 after  13 skipped   3 [20potatoes]
1   File position before  13 after  25 skipped   4 [10apples]
2   File position before  25 after  33 skipped   2 [carrot]
3   File position before  33 after  45 skipped   6 [mangos]
4   File position before  45 after  54 skipped   2 [oranges]
#+end_example

But this one reads ints

- it will skip whitespace
  - read only numeric characters
  - and will convert them to the desired number

#+BEGIN_SRC C++ :main no :flags -std=c++14 -Wall --pedantic -Werror :results output :exports both
#include <iostream>
#include <fstream>
#include <iomanip>
int main()
{
   int value;
   int i {};
   std::ifstream myfile ("groceries3.txt");
   //std::ifstream myfile ("groceriesUnix.txt");
   if(!myfile) throw std::runtime_error("unable to open input file");
   std::streamoff pos;

   while (pos = myfile.tellg(), //store location
          myfile >> value) {        // read character
      auto posAfter =  myfile.tellg();
      std::cout << std::setw(3) << std::left << i++ << std::right 
                << " File position before " << std::setw(3) << pos
                << " after " << std::setw(3) << posAfter 
                << " value [" << value << "]" <<std::endl;
   }

   return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
0   File position before   0 after   5 value [20]
#+end_example

in general:

- reading with >> skips whitespace
- it will only read the characters that belong to the type until whitespace or eof()
  - strings: any char
  - char: any char
  - integral type (int, long, etc): any digit and sign
  - floating point: same as integral type plus . and e 
- be careful when  combine >> and getline
  - >> does not consume the end of line
  - the getline that follows will be the whitespace after the previous read

- Example


#+BEGIN_SRC C++ :main no :flags -std=c++14 -Wall --pedantic -Werror :results output :exports both
#include <iostream>
#include <fstream>
#include <iomanip>
#include <functional>
int main()
{
    std::string st0 {};
    std::string st1{};
    std::string st2{};
    int i{};
    auto print = [&] () { 
        std::cout << "i: [" << i << "]" << std::endl;
        std::cout << "st0: [" << st0 << "]" << std::endl;
        std::cout << "st1: [" << st1 << "]" << std::endl;
        std::cout << "st2: [" << st2 << "]" << std::endl;
    };


    std::ifstream myfile ("groceries3.txt");
    if(!myfile) throw std::runtime_error("unable to open input file");

    myfile >> i;
    getline(myfile, st1);
    getline(myfile, st2);
    print();
    i = 0;
    std::cout << "Again:-----------------" << std::endl;
    myfile.seekg (0, myfile.beg);
    getline(myfile, st0);
    getline(myfile, st1);
    getline(myfile, st2);
    print();

    return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
i: [20]
st0: []
st1: [potatoes]
st2: [   10apples]
Again:-----------------
i: [0]
st0: [   20potatoes]
st1: [   10apples]
st2: []
#+end_example


* Reading binary data

For this section we will use this file. It was created with windows end-of-line-characters

#+BEGIN_SRC sh :results output
cat groceries.txt
#+END_SRC

#+RESULTS:
#+begin_example
butter	potatoes
rice
#+end_example


#+BEGIN_SRC sh :results output
hexdump groceries.txt
#+END_SRC

#+RESULTS:
#+begin_example
0000000 7562 7474 7265 7009 746f 7461 656f 0d73
0000010 720a 6369 0d65 000a                    
0000017
#+end_example

#+BEGIN_SRC sh :results output
cat  groceries.txt | hexdump -v  -e '/1  "%_ad#    "' -e '/1    "0x%02X"' -e '/1 " = %03i dec"' -e '/1 " = 0%03o oct"' -e '/1 " = %_u\n"'
#+END_SRC

#+RESULTS:
#+begin_example
0#    0x62 = 098 dec = 0142 oct = b
1#    0x75 = 117 dec = 0165 oct = u
2#    0x74 = 116 dec = 0164 oct = t
3#    0x74 = 116 dec = 0164 oct = t
4#    0x65 = 101 dec = 0145 oct = e
5#    0x72 = 114 dec = 0162 oct = r
6#    0x09 = 009 dec = 0011 oct = ht
7#    0x70 = 112 dec = 0160 oct = p
8#    0x6F = 111 dec = 0157 oct = o
9#    0x74 = 116 dec = 0164 oct = t
10#    0x61 = 097 dec = 0141 oct = a
11#    0x74 = 116 dec = 0164 oct = t
12#    0x6F = 111 dec = 0157 oct = o
13#    0x65 = 101 dec = 0145 oct = e
14#    0x73 = 115 dec = 0163 oct = s
15#    0x0D = 013 dec = 0015 oct = cr
16#    0x0A = 010 dec = 0012 oct = lf
17#    0x72 = 114 dec = 0162 oct = r
18#    0x69 = 105 dec = 0151 oct = i
19#    0x63 = 099 dec = 0143 oct = c
20#    0x65 = 101 dec = 0145 oct = e
21#    0x0D = 013 dec = 0015 oct = cr
22#    0x0A = 010 dec = 0012 oct = lf
#+end_example

** Read the file one character at a time (using >>)

- skips whitespace!!!

#+BEGIN_SRC C++ :main no :flags -std=c++14 -Wall --pedantic -Werror :results output :exports both
#include <iostream>
#include <fstream>
#include <iomanip>
int main()
{
   char c {};
   int i {};
   std::ifstream myfile ("groceries.txt");
   //std::ifstream myfile ("groceriesUnix.txt");
   if(!myfile) throw std::runtime_error("unable to open input file");
   std::streamoff pos;

   while (pos = myfile.tellg(), //store location
          myfile >> c) {        // read character
      auto posAfter =  myfile.tellg();
      std::cout << std::setw(3) << std::left << i++ << std::right 
                << " File position before " << std::setw(3) << pos
                << " after " << std::setw(3) << posAfter 
                << " skipped " << std::setw(3) << posAfter - pos
                << " [" << std::setw(3) 
                << int(c) << "] [" << c<< "]" <<std::endl;
   }

   return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
0   File position before   0 after   1 skipped   1 [ 98] [b]
1   File position before   1 after   2 skipped   1 [117] [u]
2   File position before   2 after   3 skipped   1 [116] [t]
3   File position before   3 after   4 skipped   1 [116] [t]
4   File position before   4 after   5 skipped   1 [101] [e]
5   File position before   5 after   6 skipped   1 [114] [r]
6   File position before   6 after   8 skipped   2 [112] [p]
7   File position before   8 after   9 skipped   1 [111] [o]
8   File position before   9 after  10 skipped   1 [116] [t]
9   File position before  10 after  11 skipped   1 [ 97] [a]
10  File position before  11 after  12 skipped   1 [116] [t]
11  File position before  12 after  13 skipped   1 [111] [o]
12  File position before  13 after  14 skipped   1 [101] [e]
13  File position before  14 after  15 skipped   1 [115] [s]
14  File position before  15 after  18 skipped   3 [114] [r]
15  File position before  18 after  19 skipped   1 [105] [i]
16  File position before  19 after  20 skipped   1 [ 99] [c]
17  File position before  20 after  21 skipped   1 [101] [e]
#+end_example

We use the manipulator std::noskipws to disable skipping whitespace

#+BEGIN_SRC C++ :main no :flags -std=c++14 -Wall --pedantic -Werror :results output :exports both
#include <iostream>
#include <fstream>
#include <iomanip>
int main()
{
   char c {};
   int i {};
   std::ifstream myfile ("groceries.txt");
   //std::ifstream myfile ("groceries3.txt");
   if(!myfile) throw std::runtime_error("unable to open input file");

   std::streamoff pos {}; // to save position within file

   myfile >> std::noskipws; // do not skip whitespace
   
   while (pos = myfile.tellg(), //store location
          myfile >> c) {        // read character
      auto posAfter =  myfile.tellg();
      std::cout << std::setw(3) << std::left << i++ << std::right 
                << " File position before " << std::setw(3) << pos
                << " after " << std::setw(3) << posAfter 
                << " skipped " << std::setw(3) << posAfter - pos
                << " [" << std::setw(3) 
                << int(c) << "] [" << c<< "]" <<std::endl;
   }

   return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
0   File position before   0 after   1 skipped   1 [ 98] [b]
1   File position before   1 after   2 skipped   1 [117] [u]
2   File position before   2 after   3 skipped   1 [116] [t]
3   File position before   3 after   4 skipped   1 [116] [t]
4   File position before   4 after   5 skipped   1 [101] [e]
5   File position before   5 after   6 skipped   1 [114] [r]
6   File position before   6 after   7 skipped   1 [  9] [	]
7   File position before   7 after   8 skipped   1 [112] [p]
8   File position before   8 after   9 skipped   1 [111] [o]
9   File position before   9 after  10 skipped   1 [116] [t]
10  File position before  10 after  11 skipped   1 [ 97] [a]
11  File position before  11 after  12 skipped   1 [116] [t]
12  File position before  12 after  13 skipped   1 [111] [o]
13  File position before  13 after  14 skipped   1 [101] [e]
14  File position before  14 after  15 skipped   1 [115] [s]
15  File position before  15 after  16 skipped   1 [ 13] []
16  File position before  16 after  17 skipped   1 [ 10] [
]
17  File position before  17 after  18 skipped   1 [114] [r]
18  File position before  18 after  19 skipped   1 [105] [i]
19  File position before  19 after  20 skipped   1 [ 99] [c]
20  File position before  20 after  21 skipped   1 [101] [e]
21  File position before  21 after  22 skipped   1 [ 13] []
22  File position before  22 after  23 skipped   1 [ 10] [
]
#+end_example

** But we can also read using read() which reads bytes directly from files

- this program reads one character at a time

#+BEGIN_SRC C++ :main no :flags -std=c++14 -Wall --pedantic -Werror :results output :exports both
#include <iostream>
#include <fstream>
#include <iomanip>
#include <cassert>
int main()
{
   // make sure the char is one byte before we proceed
   assert(sizeof(char) == 1);

   char c {};
   int i {0};
   std::ifstream myfile ("groceries.txt");
   if(!myfile) throw std::runtime_error("unable to open input file");

   while (!myfile.eof()) {
      auto pos {myfile.tellg()};
      // read one character 
      // we must pass a reference to a byte
      myfile.read(&c,1); // instead of myfile >> c
      std::cout << std::setw(3) << std::left << i++ << std::right 
                << " File position " << std::setw(3) << pos
                << " [" << std::setw(3) 
                << int(c) << "] [" << c<< "]" <<std::endl;
   }

   return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
0   File position   0 [ 98] [b]
1   File position   1 [117] [u]
2   File position   2 [116] [t]
3   File position   3 [116] [t]
4   File position   4 [101] [e]
5   File position   5 [114] [r]
6   File position   6 [  9] [	]
7   File position   7 [112] [p]
8   File position   8 [111] [o]
9   File position   9 [116] [t]
10  File position  10 [ 97] [a]
11  File position  11 [116] [t]
12  File position  12 [111] [o]
13  File position  13 [101] [e]
14  File position  14 [115] [s]
15  File position  15 [ 13] []
16  File position  16 [ 10] [
]
17  File position  17 [114] [r]
18  File position  18 [105] [i]
19  File position  19 [ 99] [c]
20  File position  20 [101] [e]
21  File position  21 [ 13] []
22  File position  22 [ 10] [
]
23  File position  23 [ 10] [
]
#+end_example


** We can also read it all at once

- it is way faster
- use seekg to seek to the end of file
- use tellg to know the offset of the end of file
- this is the size of the file in bytes
- use a vector to read the file from the current position until end of file
- but you are responsible to make sure the vector has been resized to the number of bytes you are going to read

#+BEGIN_SRC C++ :main no :flags -std=c++14 -Wall --pedantic -Werror :results output :exports both
#include <iostream>
#include <fstream>
#include <iomanip>
#include <vector>
#include <cassert>
#include <iterator>
int main()
{
   // make sure the char is one byte before we proceed
   assert(sizeof(unsigned char) == 1);
   
   std::ifstream myfile ("groceries.txt");

   if(!myfile) throw std::runtime_error("unable to open input file");

   /// first we need to compute the file size
   // go to end of file
   myfile.seekg (0, myfile.end);
   // save position. This is the length of the file in bytes
   // std::streamoff is a long int
   std::streamoff fileSize {myfile.tellg()};

   // move to the beginning again to we can read it from there
   myfile.seekg (0, myfile.beg);

   std::string buf {};

   buf.resize(fileSize);
   // this makes the reading much faster, otherwise it would
   // need to resize the vector at every character

   // we must pass a reference to a byte, 
   // it is our _responsibility_ to make sure the
   // buffer has enough space to read it

   myfile.read(&buf[0], buf.size());

   std::cout << buf << std::endl;

   for(unsigned i=0;i<buf.size();i++) {
      unsigned char c = buf.at(i);
      std::cout << std::setw(3) << std::left << i << std::right 
                << " File position " << std::setw(3) << i
                << " [" << std::setw(3) 
                << int(c) << "] [" << c<< "]" <<std::endl;
      
   }
   
   return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
butter	potatoes
rice

0   File position   0 [ 98] [b]
1   File position   1 [117] [u]
2   File position   2 [116] [t]
3   File position   3 [116] [t]
4   File position   4 [101] [e]
5   File position   5 [114] [r]
6   File position   6 [  9] [	]
7   File position   7 [112] [p]
8   File position   8 [111] [o]
9   File position   9 [116] [t]
10  File position  10 [ 97] [a]
11  File position  11 [116] [t]
12  File position  12 [111] [o]
13  File position  13 [101] [e]
14  File position  14 [115] [s]
15  File position  15 [ 13] []
16  File position  16 [ 10] [
]
17  File position  17 [114] [r]
18  File position  18 [105] [i]
19  File position  19 [ 99] [c]
20  File position  20 [101] [e]
21  File position  21 [ 13] []
22  File position  22 [ 10] [
]
#+end_example


** Binary mode is only useful for output and in only in windows

- Under Windows, default output mode replaces \n with \r
- If we don't want this conversion, we use binary mode

If you run windows, try the following code. Your output will be different than mine
then look at the number of bytes used by each file. One is 4 bytes, the other 5 bytes

#+BEGIN_SRC C++ :main no :flags -std=c++14 -Wall --pedantic -Werror :results output :exports both
#include <iostream>
#include <fstream>
int main()
{
   std::ofstream myfileB ("outputBinary.txt", std::ios::binary);
   myfileB << "abc\n" ;

   std::ofstream myfile ("output.txt");
   myfile << "abc\n" ;

   std::cout << "Done " << std::endl;
   return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
Done
#+end_example

#+BEGIN_SRC sh :results output
cat  output.txt | hexdump -v  -e '/1  "%_ad#    "' -e '/1    "0x%02X"' -e '/1 " = %03i dec"' -e '/1 " = 0%03o oct"' -e '/1 " = %_u\n"'
#+END_SRC

#+RESULTS:
#+begin_example
0#    0x61 = 097 dec = 0141 oct = a
1#    0x62 = 098 dec = 0142 oct = b
2#    0x63 = 099 dec = 0143 oct = c
3#    0x0A = 010 dec = 0012 oct = lf
#+end_example

