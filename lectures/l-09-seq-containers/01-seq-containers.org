#+STARTUP: showall
#+STARTUP: lognotestate
#+TAGS:
#+SEQ_TODO: TODO STARTED DONE DEFERRED CANCELLED | WAITING DELEGATED APPT
#+DRAWERS: HIDDEN STATE
#+TITLE: Sequential Containers
#+CATEGORY: 
#+PROPERTY: header-args:sql             :engine postgresql  :exports both :cmdline csc370
#+PROPERTY: header-args:sqlite          :db /path/to/db  :colnames yes
#+PROPERTY: header-args:C++             :results output :flags -std=c++14 -Wall --pedantic -Werror
#+PROPERTY: header-args:R               :results output  :colnames yes

* Types of sequential containers

| array        | Fixed-sized array      | Fast random access                       | Cannot change size                |
| vector       | Flexible-array.        | Fast random access                       | Fast insert at the back           |
| string       | Flexible-array (chars) | Fast random access                       | Fast insert at the back           |
| deque        | double ended queue     | Fast random access                       | Fast insert at front or back      |
| list         | doubly-linked list     | Only sequential access (both directions) | Fast inserts/deletes at any point |
| forward_list | singly-linked list     | Only sequential access (one direction)   | Fast inserts/deletes at any point |

All except array provide fast flexible memory management

- Can remove/add elements
- Each has advantages and disadvantages

** array/vector/string

- elements are in contiguous memory
- *fast* to access any position
  - constant time 
- *slow* to insert in the middle vector/string
  - if not memory reserved:
    - allocate memory, copy
    - proportional to size of array
  - if memory reserved:
    - increase size, shift portion of array
    - on average: proportional to size()/2 
  - if inserting at end, and memory reserved
    - constant time

** dequeu
 - similar to vector/string
 - but it supports constant insertion at the beginning and end

** list/forward list

- implemented as linked lists
- elements are scattered in memory: 
- no support for random access
  - we need to traverse them to find n-th element
  - on average, 
    - if in list: need to traverse size()/2 elements
    - if not in list: need to traverse all elements

- *fast* to add or remove elements 
  - if we know the position of the predecessor/successor
    - allocate memory
    - update points of previous/next
  - constant time

** array

- it is intended to replace the C array
- fast 
- boundary checks on demand: at() vs []

#+BEGIN_SRC C++
//use
std::array<int> myArray(10);

//instead of
int myArray[10];
#+END_SRC

** When to use array

- Accessing individual elements by their index
- Fast to iterate over the elements (linear time)
- Not need to add/remove elements

** When not to use array

- You need to change the size of the array

** When to use vector

- Accessing individual elements by their index
- Fast to iterate over the elements (linear time)
- Add/remove elements to/from its end (constant *amortized* time)

** When not to use vector

- Need to insert many times in the middle
- Need to insert many times in the front
  - that is why it does not have push_front()

** When to use dequeu

- Same as vector
- Add/remove elements to/from its beginning or end  
  (constant *amortized* time)
- slightly more expensive than vector

** When to use list/forward_list

- Efficient insertion/deletion anywhere (constant time)
- We can efficiently move a section to another list (splice)
  - constant time
  
** When not to use a list/forward_list

 - No direct access to specific positions 
 - forward_list uses slightly less memory than list


* Iterators

- The help us traverse sequential containers
- Fast access to their elements
- Provide a clean, simple interface to elements of containers, regardless of their actual implementation
- They are pointers
- Most common used: begin(), end()
  - begin() points to first element
  - end() points one past the last element (not to a real value)
- We can increment these pointers to access other elements

* Iterator range:

- Pair of iterators: begin(), end()
- Each iterator points to:
  - An element
  - One past the last element
- in mathematical terms it is a range: [begin,end)
- called left inclusive interval

* Left-inclusive-ranges

- if begin() equal end(), range is empty
- if we increment begin(), we will eventually reach end()

- the following is always guaranteed to work 

#+BEGIN_SRC C++
// begin and end are a left-inclusive interval

for (auto it= begin; it!=c.end;it++) {
   *it ; // current element
   it++;
}
#+END_SRC

** Examples

In vectors, we can do iterator "arithmetic" (add, subtract from an iterator)

#+BEGIN_SRC C++ :main no :flags -std=c++14 -Wall --pedantic -Werror :results output :exports both
#include <iostream>
#include <vector>

int main()
{
   std::vector<int> vec1{1,2,3,4,5}; // initialize to specific values
   
   std::cout << "First : " << *vec1.begin() << std::endl;
   std::cout << "Second : " << *(vec1.begin()+1) << std::endl;
   std::cout << "Third : " << *(vec1.begin()+2) << std::endl;
   std::cout << "Last : " << *(vec1.end()-1) << std::endl;
   std::cout << "Last +1 : " << *(vec1.end()) << std::endl;
   // program might crash at this point
   std::cout << "Last +1000 : " << *(vec1.end()+999) << std::endl;

   return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
First : 1
Second : 2
Third : 3
Last : 5
Last +1 : 0
Last +1000 : 0
#+end_example

- But for a list, we cannot do iterator arithmetic

#+BEGIN_SRC C++ :main no :flags -std=c++14 -Wall --pedantic -Werror :results output :exports both
#include <iostream>
#include <list>

int main()
{
   std::list<int> list{1,2,3,4,5}; // initialize to specific values
   
   std::cout << "First : " << *list.begin() << std::endl;
   auto it = list.begin();
   it++;
   std::cout << "Second : " << *it << std::endl;
   it++;
   std::cout << "Third : " << *it << std::endl;
// the rest of the operations will not work
//   
//   std::cout << "Third : " << *(list.begin()+2) << std::endl;
//   std::cout << "Last : " << *(list.end()-1) << std::endl;
//   std::cout << "Last +1 : " << *(list.end()) << std::endl;
//   std::cout << "Last +1000 : " << *(list.end()+999) << std::endl;

   return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
First : 1
Second : 2
Third : 3
#+end_example

- We can use the iterator to print to traverse the collection
- This works for _any_ collection

#+BEGIN_SRC C++ :main no :flags -std=c++14 -Wall --pedantic -Werror :results output :exports both
#include <iostream>
#include <vector>
#include <list>

int main()
{
   std::vector<int> vec1{1,2,3,4,5}; // initialize to specific values
   // this works because all elements are guaranteed to be contiguous
    
   int pos = 0;
   for (auto it = vec1.begin(); it != vec1.end(); it++, pos++) {
       std::cout << "Position : " << pos 
                 << " Values : " << *it << std::endl;
   }

   return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
Position : 0 Values : 1
Position : 1 Values : 2
Position : 2 Values : 3
Position : 3 Values : 4
Position : 4 Values : 5
#+end_example

*** Deque

this is a circular queue, we can push in the front or in the back 

#+BEGIN_SRC C++ :main no :flags -std=c++14 -Wall --pedantic -Werror :results output :exports both
#include <iostream>
#include <deque>

int main()
{
   std::deque<int> q{1,2}; // initialize to specific values
   // this works because all elements are guaranteed to be contiguous
   q.push_front(0);
   q.push_front(-1);
   q.push_back(100);
   for (auto it = q.begin(); it!= q.end(); it++) {
       std::cout << "Position : " << it - q.begin()
                 << " Values : " << *it << std::endl;
   }

   return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
Position : 0 Values : -1
Position : 1 Values : 0
Position : 2 Values : 1
Position : 3 Values : 2
Position : 4 Values : 100
#+end_example


List:

#+BEGIN_SRC C++ :main no :flags -std=c++14 -Wall --pedantic -Werror :results output :exports both
#include <iostream>
#include <list>
#include <algorithm>
int main()
{
   std::list<int> li{1,2,3}; // initialize to specific values
   
   li.push_back(10);
   auto it = std::find(li.begin(), li.end(), 2); 
   if (it != li.end())
      li.insert(it, 30);
   for (auto it = li.begin(); it != li.end(); it++) {
       // it - li(begin() does not compile
       //  list iterators do not define the - operator
       std::cout << "Values : " << *it << std::endl;
   }

   return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
Values : 1
Values : 30
Values : 2
Values : 3
Values : 10
#+end_example

** Type of iterator

containertype<type_element>::iterator 

Easier to use auto

#+BEGIN_SRC C++ :main no :flags -std=c++14 -Wall --pedantic -Werror :results output :exports both
#include <iostream>
#include <list>

int main()
{
   std::list<int> li{1,2,3}; // initialize to specific values
   
   std::list<int>::iterator it;

   for (it = li.begin(); it != li.end(); it++) {
       auto it2 = it;

       // it - li(begin() does not compile
       //  list iterators do not define the - operator
       std::cout << "Values : " << *it2 << std::endl;
   }

   return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
Values : 1
Values : 2
Values : 3
#+end_example

** reverse iterators

they go *backwards*

- regin()
- rend()

- notice the use of + to move backwards
- use of - to move forward!

#+BEGIN_SRC C++ :main no :flags -std=c++14 -Wall --pedantic -Werror :results output :exports both
#include <iostream>
#include <vector>

int main()
{
   std::vector<int> vec1{1,2,3,4,5}; // initialize to specific values
   
   std::cout << "Last : " << *vec1.rbegin() << std::endl;
   std::cout << "Second to last : " << *(vec1.rbegin()+1) << std::endl;
   std::cout << "Third to last: " << *(vec1.rbegin()+2) << std::endl;
   std::cout << "First : " << *(vec1.rend()-1) << std::endl;
   // vec1.rend() points to before vector!
   std::cout << "rend : " << *vec1.rend() << std::endl;

   return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
Last : 5
Second to last : 4
Third to last: 3
First : 1
rend : 0
#+end_example

* We can modify elements directly using iterators

#+BEGIN_SRC C++ :main no :flags -std=c++14 -Wall --pedantic -Werror :results output :exports both
#include <iostream>
#include <vector>

void print(std::vector<int> &v) { std::cout << "Container: "; for(auto el: v) std::cout << el << ": " ; std::cout << std::endl;}

int main()
{
   std::vector<int> vec{1,2,3,4,5}; // initialize to specific values
   
   print(vec);
   *(vec.begin()) = -1;
   *(vec.begin()+2) = -4;
   *(vec.end()-1) = 0;

   print(vec);

   return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
Container: 1: 2: 3: 4: 5: 
Container: -1: 2: -4: 4: 0:
#+end_example

** But we also have const iterators that do not allow modification, only access

type 

containertype<type_element>::const_iterator 


- cbegin()
- cend()
- crbegin()
- crend()


#+BEGIN_SRC C++ :main no :flags -std=c++14 -Wall --pedantic -Werror :results output :exports both
#include <iostream>
#include <vector>

void print(std::vector<int> &v) { std::cout << "Container: "; for(auto el: v) std::cout << el << ": " ; std::cout << std::endl;}

int main()
{
   std::vector<int> vec{1,2,3,4,5}; // initialize to specific values
   
   
   std::cout << *vec.cbegin() << std::endl;
   std::cout << *(vec.cend()-1) << std::endl;
   
   std::cout << *vec.rbegin() << std::endl;
   std::cout << *(vec.rend()-1) << std::endl;
// 
// this will not work. We cannot modify via a const iterator
//   *(vec.cbegin()) = -1;
   

   return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
1
5
5
1
#+end_example


* Construction

** Array is different

Its constructor syntax is different than the rest of the containers

#+BEGIN_SRC C++ :main no :flags -std=c++14 -Wall --pedantic -Werror :results output :exports both
#include <iostream>
#include <array>


void print(std::array<int,4> &v) { std::cout << "Container: "; for(auto el: v) std::cout << el << ": " ; std::cout << std::endl;}
void print10(std::array<int,10> &v) { std::cout << "Container: "; for(auto el: v) std::cout << el << ": " ; std::cout << std::endl;}
void printchar(std::array<char,3> &v) { std::cout << "Container: "; for(auto el: v) std::cout << el << ": " ; std::cout << std::endl;}

int main()
{
   std::array<int,4> a1 {1,2,3,4};
   std::array<char,3> a2 {'a','b','c'};
// this would be invalid: we must initalize at most the number we request
//   std::array<char,3> a2 {'a','b','c','d'};
// rest set to zero
   std::array<int,10> a3 {1,2}; 

   print(a1);
   printchar(a2);
   print10(a3);

   return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
Container: 1: 2: 3: 4: 
Container: a: b: c: 
Container: 1: 2: 0: 0: 0: 0: 0: 0: 0: 0:
#+end_example

** the rest can be initialized as we have seen before


#+BEGIN_SRC C++ :main no :flags -std=c++14 -Wall --pedantic -Werror :results output :exports both
#include <iostream>
#include <vector>
#include <list>

void print(std::vector<int> &v) { std::cout << "Container: "; for(auto el: v) std::cout << el << ": " ; std::cout << std::endl;}

int main()
{
   std::vector<int> vec; // creates an container vector
   std::vector<int> vec2{1,2,3}; // initialize to specific values
   std::vector<int> vec3(vec2); // creates a copy of another container (same type)
   
   print(vec);
   print(vec2);
   print(vec3);
   return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
Container: 
Container: 1: 2: 3: 
Container: 1: 2: 3:
#+end_example


#+BEGIN_SRC C++ :main no :flags -std=c++14 -Wall --pedantic -Werror :results output :exports both
#include <iostream>
#include <list>
#include <list>

void print(std::list<int> &v) { 
   std::cout << "Container: "; 
   for(auto el: v) 
     std::cout << el << ": " ; 
   std::cout << std::endl;
}

int main()
{
   std::list<int> l; // creates an container list
   std::list<int> l2{1,2,3}; // initialize to specific values
   std::list<int> l3(l2); // creates a copy of another container (same type)
   
   print(l);
   print(l2);
   print(l3);
   return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
Container: 
Container: 1: 2: 3: 
Container: 1: 2: 3:
#+end_example

** We can construct using iterators copying elements from another collection

- constructor(begin, end);
- end points to the element  NOT copied

#+BEGIN_SRC C++ :main no :flags -std=c++14 -Wall --pedantic -Werror :results output :exports both
#include <iostream>
#include <vector>
#include <list>

template <typename T>
void print(T &v) { std::cout << "Container: "; for(auto el: v) std::cout << el << ": " ; std::cout << std::endl;}

int main()
{
   std::vector<char> vec {'a','b','c','d','e'};
   //copies from 2nd element, just before 4th element
   std::vector<char> vec2(vec.begin()+2, vec.begin()+4); 
   
   print(vec);
   print(vec2);
   return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
Container: a: b: c: d: e: 
Container: c: d:
#+end_example

*** We can use iterators to copy from one type of container to another!

#+BEGIN_SRC C++ :main no :flags -std=c++14 -Wall --pedantic -Werror :results output :exports both
#include <iostream>
#include <vector>
#include <list>
#include <deque>

template <class T>
void print(T &v) 
{ 
    std::cout << "Container: ";
    for(auto el: v)
        std::cout << el << ": " ;
    std::cout << std::endl;
}

int main()
{
   std::vector<char> vec {'a','b','c','d','e'};
   //copies from 2nd element, just before 4th element
   std::list<char> li(vec.begin()+2, vec.begin()+3); 
   // copy all list to dqueue
   std::deque<char> q(vec.begin(), vec.end()); 
   // but you are responsible for making sure you pass the correct end iterator
   std::vector<char> vec2(vec.begin(), vec.begin()+20); 


   std::cout << "Vector:" << std::endl;
   print(vec);
   std::cout << "List:" << std::endl;
   print(li);
   std::cout << "DQueue:" << std::endl;
   print(q);
   std::cout << "Vector2:" << std::endl;
   print(vec2);
   return 0;
}
#+END_SRC

#+RESULTS:
#+begin_example
Vector:
Container: a: b: c: d: e: 
List:
Container: c: 
DQueue:
Container: a: b: c: d: e: 
Vector2:
Container: a: b: c: d: e:  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :
#+end_example


* Common operations

the following operations all create the object to be inserted (it is a copy of the parameter)

| name                  | description                                                     | return type |
|-----------------------+-----------------------------------------------------------------+-------------|
| push_back(el)         | inserts el at the end of the collection.                        | void        |
| push_front(el)        | inserts el at the beginning of the collection                   | void        |
| insert(it, el)        | inserts el before the given iterator it position                | iterator    |
| insert(it1, itb, ite) | inserts  before it1 copies of the values in the range [itb,ite) | iterator    |


#+BEGIN_SRC C++ :main no :flags -std=c++14 -Wall --pedantic -Werror :results output :exports both
#include <iostream>
#include <string>
#include <vector>
#include <list>
#include <deque>

template <class T>
void print(std::string name, T &v) { std::cout << name + ": "; for(auto el: v) std::cout << el << ": " ; std::cout << std::endl;}

int main()
{
   std::vector<char> vec {'a','b','c','d','e'};
   //copies from 2nd element, just before 4th element
   std::list<char> li {'x','y','z'};
   
   vec.push_back('9');
   //vec.push_front('9'); vector does not implment push_front
   li.push_front('w');
   li.push_back('0');
   
   print("vector", vec);
   print("list", li);

   auto it = li.begin();

   vec.insert(vec.begin()+ 1, '-');
// this is not allowed for lists
// li.insert(li.begin() + 1, '-');
   li.insert(++it,'-');

   print("vector2", li);
   print("list2", li);

   li.insert(li.end(), vec.begin()+2, vec.end());

   print("list3", li);

   return 0;
}
#+END_SRC

#+RESULTS:
#+begin_example
vector: a: b: c: d: e: 9: 
list: w: x: y: z: 0: 
vector2: w: -: x: y: z: 0: 
list2: w: -: x: y: z: 0: 
list3: w: -: x: y: z: 0: b: c: d: e: 9:
#+end_example

Taking advantage that insert returns an iterator

#+BEGIN_SRC C++ :main no :flags -std=c++14 -Wall --pedantic -Werror :results output :exports both
#include <iostream>
#include <string>
#include <vector>
#include <list>
#include <deque>

template <class T>
void print(std::string name, T &v) 
{ std::cout << name + ": "; for(auto el: v) std::cout << el << ": " ; std::cout << std::endl;}

int main()
{
   std::deque<int> d {};
   
   auto it = d.begin();
   for(int i=0;i<5;i++) {
       it = d.insert(it, i);
   } 
   print("dequeue", d);
   return 0;
}
#+END_SRC

#+RESULTS:
#+begin_example
dequeue: 4: 3: 2: 1: 0:
#+end_example

* Accessing elements

Assuming c is a container

| c.back()  | Last element                         |
| c.front() | first element. Equivalent to c.at(0) |

The following operations do not work for list and forward_list

| c[n]    | Access n-th element of the (0-based) |
| c.at(n) | Same as c[n] but with boundary checks |

All of them return references:

#+BEGIN_SRC C++ :main no :flags -std=c++14 -Wall --pedantic -Werror :results output :exports both
#include <iostream>
#include <vector>
int main()
{
   std::vector<int> v {10,11,12,13};

   v.front() = 0;
   v.at(1) = 1;
   v[2] = 2;
   v.back() = 3;

   for (auto el: v) {
      std::cout << el << std::endl;
   } 

   return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
0
1
2
3
#+end_example


* Removing elements

Assuming c is a container 

| c.pop_back()      | removes last element. Not valid for forward_list               |
| c.pop_front()     | removes first element. Not valid for vector, string            |
| c.erase(it)       | removes element pointed to by iterator it                      |
| c.erase(itb, ite) | removes elements from iterator itb to just before iterator ite |
| c.clear()         | clear the container                                            |

* Resizing a container


Assuming c is a container

| c.resize(n)   | resize to given number. if n < c.size(), it truncates the container |
| c.resize(n,v) | any elements added have value v                                     |

* Finding elements

