#+STARTUP: showall
#+STARTUP: lognotestate
#+TAGS:
#+SEQ_TODO: TODO STARTED DONE DEFERRED CANCELLED | WAITING DELEGATED APPT
#+DRAWERS: HIDDEN STATE
#+TITLE: std::string
#+CATEGORY: 
#+PROPERTY: header-args:sql             :engine postgresql  :exports both :cmdline csc370
#+PROPERTY: header-args:sqlite          :db /path/to/db  :colnames yes
#+PROPERTY: header-args:C++             :results output :flags -std=c++17 -Wall --pedantic -Werror
#+PROPERTY: header-args:R               :results output  :colnames yes

* Conversions

| std::to_string(val)   | Converts numeric value to a string                                        |
| std::stoi(st, pt, b)  | returns the numeric presentation of the beginning of string in given base |
| std::stol(st, pt, b)  |                                                                           |
| std::stoll(st, pt, b) |                                                                           |
| std::stof(st, pt, b)  | returns the numeric presentation of the beginning of string               |
| std::stod(st, pt, b)  |                                                                           |
| std::stold(st, pt, b) |                                                                           |

- The last 6 functions set the pointer to the position after the number
- b is a given base

#+BEGIN_SRC C++ :main no :flags -std=c++17 -Wall --pedantic -Werror :results output :exports both
#include <iostream>
int main()
{
   std::string st {};

   st = std::to_string(10789) +  "ABC";

   std::cout << "String: " << st << std::endl;

   int i;
   int j;
   int k;
   int l;
   size_t posI;
   size_t posJ;
   size_t posK;
   size_t posL;

   i = std::stoi(st, &posI, 10);
   j = std::stoi(st, &posJ, 8);
   k = std::stoi(st, &posK, 16);
   l = std::stoi(st, &posL, 2);

   std::cout << "i: " << i << " Pos: "<< posI << std::endl;
   std::cout << "j: " << j << " Pos: "<< posJ<< std::endl;
   std::cout << "k: " << k << " Pos: "<< posK<< std::endl;
   std::cout << "l: " << l << " Pos: "<< posL<< std::endl;


   return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
String: 10789ABC
i: 10789 Pos: 5
j: 71 Pos: 3
k: 276339388 Pos: 8
l: 2 Pos: 2
#+end_example


* Additional string constructors

The constructor will have different behaviour depending on the data type we use:

| string(Cstring, n)         | returns a string with the first n chars of C style string        |
| string(Cppstring, pos)     | returns a string from position pos of std::string                |
| string(Cppstring, pos,len) | returns a string from position pos of std::string of at most len |

#+BEGIN_SRC C++ :main no :flags -std=c++17 -Wall --pedantic -Werror :results output :exports both
#include <iostream>
#include <string>
int main()
{
   // if we pass a C type string
   // copy only first n characters
   std::string st("abcdefghijklmnopr",10); 
   std::cout << st << std::endl;

   // st now contains abcdefghijk
   // passsing a string copies from the given location
   std::string st2(st,3); 
   std::cout << st2 << std::endl;

   // you can also select a number of characters to copy
   std::string st3(st,3,2); 
   std::cout << st3 << std::endl;
   return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
abcdefghij
defghij
de
#+end_example


* substr

Given a string st

| st.substr(pos, len) | returns a string from position pos of maximum length len|


* insert/erase

In addition to the iterators versions (see insert/erase in containers)


| st.insert(pos, st2) | Insert st at position pos                    |
| st.erase(pos, len)  | erase at position pos at most len characters |



* find

find() returns a position in the string if the parameter is found
string::npos otherwise

| st.find(st2)| returns the position where st2 is found, if it exists|


#+BEGIN_SRC C++ :main no :flags -std=c++17 -Wall --pedantic -Werror :results output :exports both
#include <iostream>
#include <string>  

int main ()
{
  std::string str ("This is the sea");
  std::string str2 ("is");

  // different member versions of find in the same order as above:
  std::size_t found = str.find(str2);
  if (found!=std::string::npos)
    std::cout << "Found at: " << found << '\n';

  found=str.find("is",found+1);
  if (found!=std::string::npos)
    std::cout << "second 'is found at: " << found << '\n';

  return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
Found at: 2
second 'is found at: 5
#+end_example



* rfind

rfind() searches backwards

#+BEGIN_SRC C++ :main no :flags -std=c++17 -Wall --pedantic -Werror :results output :exports both
#include <iostream>
#include <string>  

int main ()
{
  std::string str ("This is the sea");
  std::string str2 ("is");

  // different member versions of find in the same order as above:
  std::size_t found = str.rfind(str2);
  if (found!=std::string::npos)
    std::cout << "Found at: " << found << '\n';

  found=str.rfind("is",found-1);
  if (found!=std::string::npos)
    std::cout << "second 'is found at: " << found << '\n';

  return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
Found at: 5
second 'is found at: 2
#+end_example

