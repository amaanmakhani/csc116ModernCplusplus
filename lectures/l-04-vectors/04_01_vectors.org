#+STARTUP: showall
#+STARTUP: lognotestate
#+TAGS:
#+SEQ_TODO: TODO STARTED DONE DEFERRED CANCELLED | WAITING DELEGATED APPT
#+DRAWERS: HIDDEN STATE
#+TITLE: Vectors
#+CATEGORY: 
#+PROPERTY: header-args: lang           :varname value
#+PROPERTY: header-args:sqlite          :db /path/to/db  :colnames yes
#+PROPERTY: header-args:C++             :results output :flags -std=c++17 -Wall --pedantic -Werror
#+PROPERTY: header-args:R               :results output  :colnames yes



* Vectors

- Vectors are the workhorse of the standard library
- For most cases, they replace arrays 
  - try to *never* use arrays
- they grow and shrink automatically
  - no need of memory management
- implement safe access to elements
  - if you try to read a non-existent element, it will generate an exception

* Example

#+BEGIN_SRC C++ :main no :flags -std=c++17 -Wall --pedantic -Werror :results output :exports both
#include <iostream>
#include <vector>

int main()
{
   std::vector<int> vec {1, 2, 3, 4, 5};

   std::cout << vec.at(3) << std::endl;
   
   for(auto v: vec) {
      std::cout << v << " " ;
   } 
   std::cout << std::endl;

   // this is the maximum size of a vector
   std::cout << vec.max_size() << std::endl;
}

#+END_SRC

#+RESULTS:
#+begin_example
4
1 2 3 4 5 
4611686018427387903
#+end_example

* adding elements dynamically

#+BEGIN_SRC C++ :main no :flags -std=c++17 -Wall --pedantic -Werror :results output :exports both
#include <iostream>
#include <vector>

int main()
{
   std::vector<int> vec {}; // empty vector
   
   std::cout << "Size: " << vec.size() << std::endl;

   vec.push_back(1); // add at the end
   vec.push_back(2);
   vec.push_back(3);

   std::cout << "Size: " << vec.size() << std::endl;

   for(auto v: vec) {
      std::cout << v << " " ;
   } 
   std::cout << std::endl;
}

#+END_SRC

#+RESULTS:
#+begin_example
Size: 0
Size: 3
1 2 3
#+end_example

** Initialize the size with a default value

- Elements are always initialized

#+BEGIN_SRC C++ :main no :flags -std=c++17 -Wall --pedantic -Werror :results output :exports both
#include <iostream>
#include <vector>

int main()
{
   std::vector<int> vec (5);
   
   std::cout << "Size: " << vec.size() << std::endl;
   for(auto v: vec) {
      std::cout << v << " " ;
   } 
   std::cout << std::endl;
}

#+END_SRC

#+RESULTS:
#+begin_example
Size: 5
0 0 0 0 0
#+end_example

#+BEGIN_SRC C++ :main no :flags -std=c++17 -Wall --pedantic -Werror :results output :exports both
#include <iostream>
#include <vector>

int main()
{
   std::vector<int> vec (3,-10); // to a specific value
   
   std::cout << "Size: " << vec.size() << std::endl;
   for(auto v: vec) {
      std::cout << v << " " ;
   } 
   std::cout << std::endl;
}

#+END_SRC

#+RESULTS:
#+begin_example
Size: 3
-10 -10 -10
#+end_example

** Vectors of vectors

#+BEGIN_SRC C++ :main no :flags -std=c++17 -Wall --pedantic :results output :exports both
#include <iostream>
#include <vector>

int main()

{
   // create a vector of (vectors of int)
   //  i.e. 2 rows  of 3 columns (each column contains an int)
   std::vector<
       std::vector<int>  
     > vec (2, std::vector<int>(3,0));

   vec[1][2] = 9;
   vec.at(0).at(1) = 7;
   std::cout << "Size: " << vec.size() << std::endl;

   for(auto subvec: vec) {
      std::cout << "size of this subvec: " << subvec.size() << std::endl;
      for(auto el: subvec) {
         std::cout << el << " " ;
      } 
      std::cout << std::endl;
   } 
   std::cout << "--------------" << std::endl;
   for(int i=0;i<vec.size();i++) {
      for(int j=0;j<vec.at(i).size();j++) {
         std::cout << vec.at(i).at(j) << " " ;
      }
      std::cout << std::endl;
   } 

}

#+END_SRC

#+RESULTS:
#+begin_example
Size: 2
size of this subvec: 3
0 7 0 
size of this subvec: 3
0 0 9 
--------------
0 7 0 
0 0 9
#+end_example

* Vectors of vectors... declaring it

#+BEGIN_SRC C++ :main no :flags -std=c++17 -Wall --pedantic -Werror :results output
#include <iostream>
#include <vector>
int main()
{
    std::vector <
        std::vector<double>
        > variableName 
   (5, std::vector<double>(2));
   std::cout  << "Size first dimension : " << variableName.size() << std::endl;
   std::cout  << "Size second dimension : " << variableName[0].size() << std::endl;
}
#+END_SRC

#+RESULTS:
#+begin_example
Size first dimension : 5
Size second dimension : 2
#+end_example

Let us break down the declaration:

#+BEGIN_SRC C++ :main no :flags -std=c++17 -Wall --pedantic -Werror :results output
#include <iostream>
#include <vector>
int main()
{
    std::vector <            // I want a vector 
        std::vector<double>  // each element of the vector is a vector
        > variableName       // name of the vector
        (5, // how many elements in the frist dimension
         std::vector<double>(2) // Each row in the vector
            );
   std::cout  << "Size first dimension : " << variableName.size() << std::endl;
   std::cout  << "Size second dimension : " << variableName[0].size() << std::endl;
}
#+END_SRC

#+RESULTS:
#+begin_example
Size first dimension : 5
Size second dimension : 2
#+end_example



#+BEGIN_SRC C++ :main no :flags -std=c++17 -Wall --pedantic :results output :exports both
#include <iostream>
#include <vector>
#include <string>

int main()
{
   std::vector<
       std::vector<std::string>
     > vec (2, std::vector<std::string>(3,"default"));

   vec.at(1).at(2) = "[at 1,2]";
   vec.at(1).at(0) = "[at 1,0]";
   vec.at(0).at(1) = "[at 0,1]";
   std::cout << "Size: " << vec.size() << std::endl;

   for(auto subvec: vec) {
      for(auto el: subvec) {
         std::cout << el << " " ;
      } 
      std::cout << std::endl;
   } 

}

#+END_SRC

#+RESULTS:
#+begin_example
Size: 2
default [at 0,1] default 
[at 1,0] default [at 1,2]
#+end_example


* Let us introduce type aliases

- Frequently we want to introduce our own types. 
- Similar to ~typedef~ in C


#+begin_src C++ :main no :flags -std=c++17 -Wall --pedantic :results output :exports both
#include <iostream>
#include <vector>

using Matrix = std::vector<
       std::vector<std::string>
     > ;

void print_matrix(const Matrix vec) {
   std::cout << "Number Rows: " << vec.size() << std::endl;
   for(auto row: vec) {
      std::cout << "Row: (size: " << row.size() << ") ";
      for(auto el: row) {
         std::cout << "[" << el << "] " ;
      } 
      std::cout << std::endl;
   } 
}

int main(void)
{
   Matrix vec (2, std::vector<std::string>(3));;
   vec.at(1).at(2) = "This";
   print_matrix(vec);
   return 0;
}
#+end_src

#+RESULTS:
#+begin_example
Number Rows: 2
Row: (size: 3) [] [] [] 
Row: (size: 3) [] [] [This]
#+end_example

** Not all the subvectors  have to be of the same length!

#+BEGIN_SRC C++ :main no :flags -std=c++17 -Wall --pedantic :results output :exports both
#include <iostream>
#include <vector>

using Matrix_int = std::vector<
       std::vector<int>
     > ;

void print_matrix(const Matrix_int vec) {
   std::cout << "Number Rows: " << vec.size() << std::endl;
   for(auto row: vec) {
      std::cout << "Row: (size: " << row.size() << ") ";
      for(auto el: row) {
         std::cout << "[" << el << "] " ;
      } 
      std::cout << std::endl;
   } 
}

int main()
{
   Matrix_int vec (2, std::vector<int>(3,0));
   print_matrix(vec);
   vec.at(0).clear(); // erase one line
   vec.at(1).at(2) = 9;
   vec.at(1).push_back(7);
   vec.push_back({-3, 9}); // push a row at once
   print_matrix(vec);
}

#+END_SRC

#+RESULTS:
#+begin_example
Number Rows: 2
Row: (size: 3) [0] [0] [0] 
Row: (size: 3) [0] [0] [0] 
Number Rows: 3
Row: (size: 0) 
Row: (size: 4) [0] [0] [9] [7] 
Row: (size: 2) [-3] [9]
#+end_example


